basePath: /
definitions:
  auth_model.TokenRequest:
    properties:
      grant_type:
        description: password | refresh_token
        example: password
        type: string
      password:
        example: "123456"
        type: string
      refresh_token:
        type: string
      username:
        example: user@mail.com
        type: string
    type: object
  auth_model.TokenResponse:
    properties:
      access_token:
        description: JWT
        example: eyJhbGciOi...
        type: string
      expires_in:
        description: seconds
        example: 3600
        type: integer
      refresh_token:
        description: JWT
        example: eyJhbGciOi...
        type: string
      token_type:
        description: Always "bearer"
        example: bearer
        type: string
    type: object
  campaign_entity.Campaign:
    properties:
      created_at:
        type: string
      id:
        type: string
      messaging_product:
        allOf:
        - $ref: '#/definitions/messaging_product_entity.MessagingProduct'
        description: Null if manager received the message.
      messaging_product_id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  campaign_entity.CampaignMessage:
    properties:
      campaign:
        $ref: '#/definitions/campaign_entity.Campaign'
      campaign_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      message:
        $ref: '#/definitions/message_entity.Message'
      message_id:
        type: string
      sender_data:
        allOf:
        - $ref: '#/definitions/message_model.SenderData'
        description: Specific data that allows to send message.
      updated_at:
        type: string
    type: object
  campaign_entity.CampaignMessageSendError:
    properties:
      campaign_message:
        $ref: '#/definitions/campaign_entity.CampaignMessage'
      campaign_message_id:
        type: string
      created_at:
        type: string
      error_data:
        description: Error message.
        type: string
      id:
        type: string
      updated_at:
        type: string
    type: object
  campaign_model.CreateCampaign:
    properties:
      messaging_product_id:
        type: string
      name:
        type: string
    required:
    - messaging_product_id
    type: object
  campaign_model.CreateCampaignMessage:
    properties:
      campaign_id:
        type: string
      sender_data:
        allOf:
        - $ref: '#/definitions/message_model.SenderData'
        description: Specific data that allows to send message.
    type: object
  campaign_model.UpdateCampaign:
    properties:
      id:
        description: The unique identifier.
        type: string
      messaging_product_id:
        type: string
      name:
        type: string
    type: object
  common_model.BusinessAccount:
    enum:
    - whatsapp_business_account
    type: string
    x-enum-varnames:
    - WhatsAppBusinessAccount
  common_model.DescriptiveError:
    properties:
      content:
        description: Additional information about the error provided by the service
          that generated it. E. g. if an ORM returns an error, it will be propagated
          here as the raw error.
      message:
        description: Short text describing the error as best as we can for humans.
        type: string
    type: object
  common_model.Error:
    properties:
      code:
        description: Error codes (not HTPP codes) described at https://developers.facebook.com/docs/whatsapp/cloud-api/support/error-codes/
        type: integer
      error_data:
        $ref: '#/definitions/common_model.ErrorData'
      fbtrace_id:
        description: Unique identifier for the error. Use this ID when contacting
          support.
        type: string
      message:
        description: A combination of the error code and title.
        type: string
      type:
        description: 'Type of error. Example: OAuthException'
        type: string
    type: object
  common_model.ErrorData:
    properties:
      details:
        description: 'Describes the error and provides most probable reason. Might
          contain information about how to solve the error. Example: Message failed
          to send because there were too many messages sent from this phone number
          in a short period of time.'
        type: string
      messaging_product:
        description: Default is "whatsapp".
        type: string
    type: object
  common_model.GraphCursors:
    properties:
      after:
        description: Used to paginate.
        type: string
      before:
        description: Used to paginate.
        type: string
    type: object
  common_model.Id:
    properties:
      id:
        type: string
    type: object
  common_model.Language:
    properties:
      code:
        description: Language and locale code. E. g. pt_BR.
        type: string
    type: object
  common_model.Pricing:
    properties:
      billable:
        type: boolean
      category:
        $ref: '#/definitions/common_model.PricingCategory'
      pricing_model:
        type: string
    type: object
  common_model.PricingCategory:
    enum:
    - authentication
    - marketing
    - utility
    - service
    - referral_conversation
    type: string
    x-enum-comments:
      Authentication: Indicates the conversation was opened by a business sending
        template categorized as AUTHENTICATION to the customer. This applies any time
        it has been more than 24 hours since the last customer message.
      Marketing: Indicates the conversation was opened by a business sending template
        categorized as MARKETING to the customer. This applies any time it has been
        more than 24 hours since the last customer message.
      ReferralConversation: Indicates a free entry point conversation.
      Service: Indicates that the conversation opened by a business replying to a
        customer within a customer service window.
      Utility: Indicates the conversation was opened by a business sending template
        categorized as UTILITY to the customer. This applies any time it has been
        more than 24 hours since the last customer message.
    x-enum-varnames:
    - Authentication
    - Marketing
    - Utility
    - Service
    - ReferralConversation
  common_model.RequiredId:
    properties:
      id:
        description: The unique identifier.
        type: string
    type: object
  common_model.SuccessResponse:
    properties:
      success:
        type: boolean
    type: object
  contact_entity.Contact:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      photo_path:
        type: string
      updated_at:
        type: string
    type: object
  contact_model.CreateContact:
    properties:
      email:
        type: string
      name:
        type: string
      photo_path:
        type: string
    type: object
  contact_model.UpdateContact:
    properties:
      email:
        type: string
      id:
        description: The unique identifier.
        type: string
      name:
        type: string
      photo_path:
        type: string
    type: object
  database_model.DateOrderEnum:
    enum:
    - asc
    - desc
    type: string
    x-enum-varnames:
    - Asc
    - Desc
  fiber.Map:
    additionalProperties: true
    type: object
  media_model.MediaInfo:
    properties:
      file_size:
        type: integer
      id:
        type: string
      messaging_product:
        type: string
      mime_type:
        type: string
      sha256:
        type: string
      url:
        type: string
    type: object
  media_model.UseMedia:
    properties:
      caption:
        description: Optional and not used for audio or sticker media.
        type: string
      filename:
        description: Optional and used for document media.
        type: string
      id:
        description: To use id your media should be in the meta server. You can upload
          an media to the meta server with https://developers.facebook.com/docs/whatsapp/cloud-api/reference/media#upload-media.
        type: string
      link:
        description: To use link your media should be in a publicly available server.
        type: string
    type: object
  message_content_type_model.Contact:
    properties:
      addresses:
        items:
          $ref: '#/definitions/message_type_contact_model.Address'
        type: array
      birthday:
        type: string
      emails:
        items:
          $ref: '#/definitions/message_type_contact_model.Email'
        type: array
      name:
        $ref: '#/definitions/message_type_contact_model.Name'
      org:
        $ref: '#/definitions/message_type_contact_model.Org'
      phones:
        items:
          $ref: '#/definitions/message_type_contact_model.Phone'
        type: array
      urls:
        items:
          $ref: '#/definitions/message_type_contact_model.URL'
        type: array
    type: object
  message_content_type_model.Interactive:
    properties:
      action:
        allOf:
        - $ref: '#/definitions/message_type_interactive_model.Action'
        description: An action object with what you want the user to perform after
          reading the message. See action object for full information.
      body:
        allOf:
        - $ref: '#/definitions/message_type_interactive_model.Body'
        description: Optional for type product. Required for other message types.
      footer:
        allOf:
        - $ref: '#/definitions/message_type_interactive_model.Footer'
        description: An object with the footer of the message.
      header:
        allOf:
        - $ref: '#/definitions/message_type_interactive_model.Header'
        description: Header content displayed on top of a message. You cannot set
          a header if your interactive object is of product type.
      type:
        allOf:
        - $ref: '#/definitions/message_type_interactive_model.InteractiveType'
        description: The type of interactive message you want to send.
    type: object
  message_content_type_model.ReceivedInteractive:
    properties:
      button_reply:
        $ref: '#/definitions/message_type_interactive_model.ButtonReplyData'
      list_reply:
        $ref: '#/definitions/message_type_interactive_model.ListReplyData'
      type:
        description: The type of interactive message received.
        type: string
    type: object
  message_entity.Message:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      from:
        allOf:
        - $ref: '#/definitions/messaging_product_entity.MessagingProductContact'
        description: Null if manager sent the message.
      from_id:
        description: Null if manager sent the message.
        type: string
      id:
        type: string
      messaging_product:
        allOf:
        - $ref: '#/definitions/messaging_product_entity.MessagingProduct'
        description: Null if manager received the message.
      messaging_product_id:
        type: string
      product_data:
        allOf:
        - $ref: '#/definitions/message_model.ProductData'
        description: Specific data about the product. For example, the webhook data
          received.
      receiver_data:
        allOf:
        - $ref: '#/definitions/message_model.ReceiverData'
        description: Specific data about the product. For example, the webhook data
          received.
      sender_data:
        allOf:
        - $ref: '#/definitions/message_model.SenderData'
        description: Specific data that allows to send message.
      statuses:
        items:
          $ref: '#/definitions/status_model.StatusFields'
        type: array
      to:
        allOf:
        - $ref: '#/definitions/messaging_product_entity.MessagingProductContact'
        description: Null if manager received the message.
      to_id:
        description: Null if manager received the message.
        type: string
      updated_at:
        type: string
    type: object
  message_model.Context:
    properties:
      message_id:
        description: Id of the message you want to answer.
        type: string
    type: object
  message_model.Message:
    properties:
      audio:
        $ref: '#/definitions/media_model.UseMedia'
      biz_opaque_callback_data:
        description: Arbitrary string used for tracking messages, groups of messages,
          you name it...
        type: string
      button:
        $ref: '#/definitions/message_type_common_model.ButtonData'
      contacts:
        items:
          $ref: '#/definitions/message_content_type_model.Contact'
        type: array
      context:
        allOf:
        - $ref: '#/definitions/message_model.Context'
        description: Used to answer a message.
      document:
        $ref: '#/definitions/media_model.UseMedia'
      image:
        $ref: '#/definitions/media_model.UseMedia'
      interactive:
        $ref: '#/definitions/message_content_type_model.Interactive'
      location:
        $ref: '#/definitions/message_type_common_model.LocationData'
      messaging_product:
        description: Default is "whatsapp".
        type: string
      order:
        $ref: '#/definitions/message_type_common_model.OrderData'
      reaction:
        $ref: '#/definitions/message_type_common_model.ReactionData'
      recipient_identity_key_hash:
        description: To use it you need to allow identity check at code.service. If
          the field is provided, this message will only be sent if "recipient_identity_key_hash"
          matches client's current hash.
        type: string
      recipient_type:
        description: Default is "individual"
        type: string
      sticker:
        $ref: '#/definitions/media_model.UseMedia'
      template:
        $ref: '#/definitions/template_model.UseTemplate'
      text:
        $ref: '#/definitions/message_type_common_model.TextData'
      to:
        description: Whatsapp ID of receiver.
        type: string
      type:
        allOf:
        - $ref: '#/definitions/message_type_common_model.Type'
        description: Type of message.
      video:
        $ref: '#/definitions/media_model.UseMedia'
    type: object
  message_model.MessageReceived:
    properties:
      audio:
        $ref: '#/definitions/media_model.UseMedia'
      button:
        $ref: '#/definitions/message_type_common_model.ButtonData'
      contacts:
        items:
          $ref: '#/definitions/message_content_type_model.Contact'
        type: array
      context:
        $ref: '#/definitions/message_model.ReceivedContext'
      document:
        $ref: '#/definitions/media_model.UseMedia'
      errors:
        items:
          $ref: '#/definitions/common_model.Error'
        type: array
      from:
        description: The customer's WhatsApp ID. A business can respond to a customer
          using this ID. This ID may not match the customer's phone number, which
          is returned by the API as input when sending a message to the customer.
        type: string
      id:
        description: The ID for the message that was received by the business. You
          could use messages endpoint to mark this specific message as read.
        type: string
      image:
        $ref: '#/definitions/media_model.UseMedia'
      interactive:
        $ref: '#/definitions/message_content_type_model.ReceivedInteractive'
      location:
        $ref: '#/definitions/message_type_common_model.LocationData'
      order:
        $ref: '#/definitions/message_type_common_model.OrderData'
      reaction:
        $ref: '#/definitions/message_type_common_model.ReactionData'
      referral:
        $ref: '#/definitions/message_model.Referral'
      sticker:
        $ref: '#/definitions/media_model.UseMedia'
      system:
        $ref: '#/definitions/message_model.System'
      template:
        $ref: '#/definitions/template_model.UseTemplate'
      text:
        $ref: '#/definitions/message_type_common_model.TextData'
      timestamp:
        description: Unix timestamp indicating when the WhatsApp server received the
          message from the customer.
        type: string
      type:
        $ref: '#/definitions/message_type_common_model.ReceiveType'
      video:
        $ref: '#/definitions/media_model.UseMedia'
    type: object
  message_model.MessageResponse:
    properties:
      id:
        type: string
      message_status:
        type: string
    type: object
  message_model.ProductData:
    properties:
      contacts:
        description: Contacts that received messages.
        items:
          $ref: '#/definitions/message_model.ResponseContact'
        type: array
      messages:
        description: Ids of sent messages.
        items:
          $ref: '#/definitions/message_model.MessageResponse'
        type: array
      messaging_product:
        description: Default is "whatsapp".
        type: string
    type: object
  message_model.ReceivedContext:
    properties:
      forwarded:
        description: Set to true if the message received by the business has been
          forwarded.
        type: boolean
      frequently_forwarded:
        description: Set to true if the message received by the business has been
          forwarded more than 5 times.
        type: boolean
      from:
        description: The WhatsApp ID for the customer who replied to an inbound message.
        type: string
      id:
        description: The message ID for the sent message for an inbound reply.
        type: string
      referred_product:
        allOf:
        - $ref: '#/definitions/message_model.ReferredProduct'
        description: Referred product object describing the product the user is requesting
          information about. You must parse this value if you support Product Enquiry
          Messages.
    type: object
  message_model.ReceiverData:
    properties:
      audio:
        $ref: '#/definitions/media_model.UseMedia'
      button:
        $ref: '#/definitions/message_type_common_model.ButtonData'
      contacts:
        items:
          $ref: '#/definitions/message_content_type_model.Contact'
        type: array
      context:
        $ref: '#/definitions/message_model.ReceivedContext'
      document:
        $ref: '#/definitions/media_model.UseMedia'
      errors:
        items:
          $ref: '#/definitions/common_model.Error'
        type: array
      from:
        description: The customer's WhatsApp ID. A business can respond to a customer
          using this ID. This ID may not match the customer's phone number, which
          is returned by the API as input when sending a message to the customer.
        type: string
      id:
        description: The ID for the message that was received by the business. You
          could use messages endpoint to mark this specific message as read.
        type: string
      image:
        $ref: '#/definitions/media_model.UseMedia'
      interactive:
        $ref: '#/definitions/message_content_type_model.ReceivedInteractive'
      location:
        $ref: '#/definitions/message_type_common_model.LocationData'
      order:
        $ref: '#/definitions/message_type_common_model.OrderData'
      reaction:
        $ref: '#/definitions/message_type_common_model.ReactionData'
      referral:
        $ref: '#/definitions/message_model.Referral'
      sticker:
        $ref: '#/definitions/media_model.UseMedia'
      system:
        $ref: '#/definitions/message_model.System'
      template:
        $ref: '#/definitions/template_model.UseTemplate'
      text:
        $ref: '#/definitions/message_type_common_model.TextData'
      timestamp:
        description: Unix timestamp indicating when the WhatsApp server received the
          message from the customer.
        type: string
      type:
        $ref: '#/definitions/message_type_common_model.ReceiveType'
      video:
        $ref: '#/definitions/media_model.UseMedia'
    type: object
  message_model.Referral:
    properties:
      body:
        description: Body for the ad or post.
        type: string
      ctwa_clid:
        description: Click ID generated by Meta for ads that click to WhatsApp.
        type: string
      headline:
        description: Headline used in the ad or post.
        type: string
      image_url:
        description: URL of the image, when media_type is an image.
        type: string
      media_type:
        description: Media present in the ad or post; image or video.
        type: string
      source_id:
        description: Meta ID for an ad or a post.
        type: string
      source_type:
        description: The type of the ad’s source; ad or post.
        type: string
      source_url:
        description: The Meta URL that leads to the ad or post clicked by the customer.
          Opening this url takes you to the ad viewed by your customer.
        type: string
      thumbnail_url:
        description: URL for the thumbnail, when media_type is a video.
        type: string
      video_url:
        description: URL of the video, when media_type is a video.
        type: string
    type: object
  message_model.ReferredProduct:
    properties:
      catalog_id:
        description: Unique identifier of the Meta catalog linked to the WhatsApp
          Business Account.
        type: string
      product_retailer_id:
        description: Unique identifier of the product in a catalog.
        type: string
    type: object
  message_model.ResponseContact:
    properties:
      input:
        description: User's phone number.
        type: string
      wa_id:
        description: User's WhatsApp id returned.
        type: string
    type: object
  message_model.SendWhatsAppMessage:
    properties:
      sender_data:
        allOf:
        - $ref: '#/definitions/message_model.Message'
        description: Specific data that allows to send message.
      to_id:
        description: Messaging product contact id to send message.
        type: string
    type: object
  message_model.SenderData:
    properties:
      audio:
        $ref: '#/definitions/media_model.UseMedia'
      biz_opaque_callback_data:
        description: Arbitrary string used for tracking messages, groups of messages,
          you name it...
        type: string
      button:
        $ref: '#/definitions/message_type_common_model.ButtonData'
      contacts:
        items:
          $ref: '#/definitions/message_content_type_model.Contact'
        type: array
      context:
        allOf:
        - $ref: '#/definitions/message_model.Context'
        description: Used to answer a message.
      document:
        $ref: '#/definitions/media_model.UseMedia'
      image:
        $ref: '#/definitions/media_model.UseMedia'
      interactive:
        $ref: '#/definitions/message_content_type_model.Interactive'
      location:
        $ref: '#/definitions/message_type_common_model.LocationData'
      messaging_product:
        description: Default is "whatsapp".
        type: string
      order:
        $ref: '#/definitions/message_type_common_model.OrderData'
      reaction:
        $ref: '#/definitions/message_type_common_model.ReactionData'
      recipient_identity_key_hash:
        description: To use it you need to allow identity check at code.service. If
          the field is provided, this message will only be sent if "recipient_identity_key_hash"
          matches client's current hash.
        type: string
      recipient_type:
        description: Default is "individual"
        type: string
      sticker:
        $ref: '#/definitions/media_model.UseMedia'
      template:
        $ref: '#/definitions/template_model.UseTemplate'
      text:
        $ref: '#/definitions/message_type_common_model.TextData'
      to:
        description: Whatsapp ID of receiver.
        type: string
      type:
        allOf:
        - $ref: '#/definitions/message_type_common_model.Type'
        description: Type of message.
      video:
        $ref: '#/definitions/media_model.UseMedia'
    type: object
  message_model.SendingStatus:
    enum:
    - delivered
    - read
    - sent
    - failed
    type: string
    x-enum-varnames:
    - Delivered
    - Read
    - Sent
    - Failed
  message_model.System:
    properties:
      body:
        description: Describes the change to the customer's identity or phone number.
        type: string
      customer:
        description: The WhatsApp ID for the customer prior to the update.
        type: string
      identity:
        description: Hash for the identity fetched from server.
        type: string
      new_wa_id:
        description: New WhatsApp ID for the customer when their phone number is updated.
          Available on webhook versions v11.0 and earlier.
        type: string
      type:
        allOf:
        - $ref: '#/definitions/message_model.SystemType'
        description: Type of system update.
      wa_id:
        description: New WhatsApp ID for the customer when their phone number is updated.
          Available on webhook versions v12.0 and later.
        type: string
    type: object
  message_model.SystemType:
    properties:
      customer_changed_number:
        description: A customer changed their phone number.
        type: string
      customer_identity_changed:
        description: A customer changed their profile information.
        type: string
    type: object
  message_type_common_model.ButtonData:
    properties:
      payload:
        type: string
      text:
        type: string
    type: object
  message_type_common_model.ButtonSubType:
    enum:
    - quick_reply
    - call_to_action
    type: string
    x-enum-varnames:
    - QuickReply
    - CallToAction
  message_type_common_model.Currency:
    properties:
      amount_1000:
        description: Value times 1000.
        type: integer
      code:
        description: Use ISO 4217.
        type: string
      fallback_value:
        description: Text in case it fails.
        type: string
    type: object
  message_type_common_model.DateTime:
    properties:
      fallback_value:
        type: string
    type: object
  message_type_common_model.LocationData:
    properties:
      address:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
    type: object
  message_type_common_model.OrderData:
    properties:
      catalog_id:
        description: ID for the catalog the ordered item belongs to.
        type: string
      product_items:
        items:
          $ref: '#/definitions/message_type_common_model.ProductItem'
        type: array
      text:
        description: Text message from the user sent along with the order.
        type: string
    type: object
  message_type_common_model.ProductItem:
    properties:
      currency:
        type: string
      item_price:
        type: string
      product_retailer_id:
        type: string
      quantity:
        type: string
    type: object
  message_type_common_model.ReactionData:
    properties:
      emoji:
        description: The emoji encoding. Something like "\uD83D\uDE00"
        type: string
      message_id:
        description: Id of the message to react to. Something like "wamid.HBgLM..."
        type: string
    type: object
  message_type_common_model.ReceiveType:
    enum:
    - system
    - unknown
    - text
    - reaction
    - location
    - contacts
    - interactive
    - template
    - image
    - video
    - audio
    - sticker
    - document
    - button
    - order
    - document
    - image
    - video
    - text
    type: string
    x-enum-varnames:
    - Document
    - Image
    - Video
    - Text
  message_type_common_model.TextData:
    properties:
      body:
        type: string
      preview_url:
        type: boolean
    type: object
  message_type_common_model.Type:
    enum:
    - system
    - unknown
    - text
    - reaction
    - location
    - contacts
    - interactive
    - template
    - image
    - video
    - audio
    - sticker
    - document
    - button
    - order
    type: string
    x-enum-varnames:
    - Document
    - Image
    - Video
    - Text
  message_type_contact_model.Address:
    properties:
      city:
        type: string
      country:
        type: string
      country_code:
        type: string
      state:
        type: string
      street:
        type: string
      type:
        type: string
      zip:
        type: string
    type: object
  message_type_contact_model.Email:
    properties:
      email:
        type: string
      type:
        type: string
    type: object
  message_type_contact_model.Name:
    properties:
      first_name:
        type: string
      formatted_name:
        type: string
      last_name:
        type: string
      middle_name:
        type: string
      prefix:
        type: string
      suffix:
        type: string
    type: object
  message_type_contact_model.Org:
    properties:
      company:
        type: string
      department:
        type: string
      title:
        type: string
    type: object
  message_type_contact_model.Phone:
    properties:
      phone:
        type: string
      type:
        type: string
      wa_id:
        type: string
    type: object
  message_type_contact_model.URL:
    properties:
      type:
        type: string
      url:
        type: string
    type: object
  message_type_interactive_model.Action:
    properties:
      button:
        description: 'Required for list messages. It cannot be an empty string and
          must be unique within the message. Emojis are supported, markdown is not.
          Maximum length: 20 characters.'
        type: string
      buttons:
        description: Required for Reply Button Messages.
        items:
          $ref: '#/definitions/message_type_interactive_model.ButtonData'
        type: array
      catalog_id:
        description: Required for Single-Product Messages and Multi-Product Messages.
          Unique identifier of the Facebook catalog linked to your WhatsApp Business
          Account. This ID can be retrieved via Commerce Manager.
        type: string
      flow_action:
        allOf:
        - $ref: '#/definitions/message_type_interactive_model.FlowAction'
        description: Optional for Flows Messages. navigate or data_exchange. Use navigate
          to predefine the first screen as part of the message. Use data_exchange
          for advanced use-cases where the first screen is provided by your endpoint.
      flow_action_payload:
        allOf:
        - $ref: '#/definitions/message_type_interactive_model.FlowActionPayload'
        description: Optional for Flows Messages. Required only if flow_action is
          navigate.
      flow_cta:
        description: 'Required for Flows Messages. Text on the CTA button, eg. "Signup".
          Maximum length: 20 characters (no emoji).'
        type: string
      flow_id:
        description: Required for Flows Messages. Unique identifier of the Flow provided
          by WhatsApp.
        type: string
      flow_message_version:
        allOf:
        - $ref: '#/definitions/message_type_interactive_model.FlowMessageVersion'
        description: Required for Flows Messages.
      flow_mode:
        allOf:
        - $ref: '#/definitions/message_type_interactive_model.FlowMode'
        description: Optional for Flows Messages. The current mode of the Flow, either
          draft or published.
      flow_token:
        description: Required for Flows Messages. A token that is generated by the
          business to serve as an identifier.
        type: string
      product_retailer_id:
        description: Required for Single-Product Messages and Multi-Product Messages.
          Unique identifier of the product in a catalog. Maximum 100 characters for
          both Single-Product and Multi-Product messages. To get this ID, go to Commerce
          Manager, select your Facebook Business account, and you will see a list
          of shops connected to your account. Click the shop you want to use. On the
          left-side panel, click Catalog > Items, and find the item you want to mention.
          The ID for that item is displayed under the item's name.
        type: string
      sections:
        description: Required for List Messages and Multi-Product Messages. There
          is a minimum of 1 and maximum of 10.
        items:
          $ref: '#/definitions/message_type_interactive_model.Section'
        type: array
    type: object
  message_type_interactive_model.Body:
    properties:
      text:
        description: Required if body is present
        type: string
    type: object
  message_type_interactive_model.ButtonData:
    properties:
      reply:
        allOf:
        - $ref: '#/definitions/message_type_interactive_model.ButtonReplyData'
        description: The reply object contains the title and ID of the reply button.
      type:
        allOf:
        - $ref: '#/definitions/message_type_interactive_model.ButtonType'
        description: The only supported option is reply for Reply Button Messages.
    type: object
  message_type_interactive_model.ButtonReplyData:
    properties:
      id:
        description: A unique identifier for the button reply.
        type: string
      title:
        description: The title of the button reply.
        type: string
    type: object
  message_type_interactive_model.ButtonType:
    enum:
    - reply
    type: string
    x-enum-varnames:
    - Reply
  message_type_interactive_model.FlowAction:
    enum:
    - navigate
    - data_exchange
    type: string
    x-enum-varnames:
    - Navigate
    - DataExchange
  message_type_interactive_model.FlowActionPayload:
    properties:
      data:
        description: Optional. The input data for the first screen of the Flow. Must
          be a non-empty object.
      screen:
        description: Required. The id of the first screen of the Flow.
        type: string
    type: object
  message_type_interactive_model.FlowMessageVersion:
    enum:
    - "3"
    type: string
    x-enum-varnames:
    - Version3
  message_type_interactive_model.FlowMode:
    enum:
    - draft
    - published
    type: string
    x-enum-varnames:
    - Draft
    - Published
  message_type_interactive_model.Footer:
    properties:
      text:
        description: Required if body is present
        type: string
    type: object
  message_type_interactive_model.Header:
    properties:
      audio:
        $ref: '#/definitions/media_model.UseMedia'
      document:
        $ref: '#/definitions/media_model.UseMedia'
      image:
        $ref: '#/definitions/media_model.UseMedia'
      text:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/message_type_interactive_model.HeaderType'
        description: Type of message.
      video:
        $ref: '#/definitions/media_model.UseMedia'
    type: object
  message_type_interactive_model.HeaderType:
    enum:
    - system
    - unknown
    - text
    - reaction
    - location
    - contacts
    - interactive
    - template
    - image
    - video
    - audio
    - sticker
    - document
    - button
    - order
    - document
    - image
    - video
    - text
    type: string
    x-enum-varnames:
    - Document
    - Image
    - Video
    - Text
  message_type_interactive_model.InteractiveType:
    enum:
    - list
    - button
    - product
    - product_list
    - catalog_message
    - flow
    type: string
    x-enum-varnames:
    - List
    - Button
    - Product
    - ProductList
    - CatalogMessage
    - Flow
  message_type_interactive_model.ListReplyData:
    properties:
      description:
        description: The description of the list reply.
        type: string
      id:
        description: A unique identifier for the list reply.
        type: string
      title:
        description: The title of the list reply.
        type: string
    type: object
  message_type_interactive_model.ProductItem:
    properties:
      product_retailer_id:
        description: Required for Multi-Product Messages. Unique identifier of the
          product in a catalog. To get this ID, go to Commerce Manager, select your
          account and the shop you want to use. Then, click Catalog > Items, and find
          the item you want to mention. The ID for that item is displayed under the
          item's name.
        type: string
    type: object
  message_type_interactive_model.Row:
    properties:
      description:
        description: 'Optional. Maximum length: 72 characters.'
        type: string
      id:
        description: 'Required. Maximum length: 200 characters.'
        type: string
      title:
        description: 'Required. Maximum length: 24 characters.'
        type: string
    type: object
  message_type_interactive_model.Section:
    properties:
      product_items:
        description: Required for Multi-Product Messages. There is a minimum of 1
          product per section and a maximum of 30 products across all sections.
        items:
          $ref: '#/definitions/message_type_interactive_model.ProductItem'
        type: array
      rows:
        description: Required for List Messages. Contains a list of row objects. Limited
          to 10 rows across all sections.
        items:
          $ref: '#/definitions/message_type_interactive_model.Row'
        type: array
      title:
        description: 'Required if the message has more than one section. Maximum length:
          24 characters.'
        type: string
    type: object
  messaging_product_entity.MessagingProduct:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        allOf:
        - $ref: '#/definitions/messaging_product_model.MessagingProductName'
        description: Add type:enum('WhatsApp'); when it becomes supported by GORM
          and PostgreSQL
        enum:
        - WhatsApp
      updated_at:
        type: string
    type: object
  messaging_product_entity.MessagingProductContact:
    properties:
      blocked:
        type: boolean
      contact:
        $ref: '#/definitions/contact_entity.Contact'
      contact_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      last_read_at:
        description: Timestamp of the last read action.
        type: string
      messaging_product:
        $ref: '#/definitions/messaging_product_entity.MessagingProduct'
      messaging_product_id:
        type: string
      product_details:
        $ref: '#/definitions/messaging_product_model.ProductDetails'
      updated_at:
        type: string
    type: object
  messaging_product_model.CreateContact:
    properties:
      contact_id:
        type: string
      messaging_product_id:
        type: string
      product_details:
        $ref: '#/definitions/messaging_product_model.ProductDetails'
    type: object
  messaging_product_model.CreateWhatsAppContact:
    properties:
      contact_id:
        type: string
      product_details:
        $ref: '#/definitions/messaging_product_model.WhatsAppProductDetails'
    type: object
  messaging_product_model.MessagingProductName:
    enum:
    - WhatsApp
    type: string
    x-enum-varnames:
    - WhatsApp
  messaging_product_model.ProductDetails:
    properties:
      phone_number:
        description: Available at from field on received messages.
        type: string
      wa_id:
        description: Available at from field on received messages.
        type: string
    type: object
  messaging_product_model.WhatsAppProductDetails:
    properties:
      phone_number:
        description: Available at from field on received messages.
        type: string
      wa_id:
        description: Available at from field on received messages.
        type: string
    type: object
  status_entity.Status:
    properties:
      created_at:
        type: string
      id:
        type: string
      json:
        $ref: '#/definitions/message_entity.Message'
      message_id:
        type: string
      product_data:
        allOf:
        - $ref: '#/definitions/status_model.ProductData'
        description: Specific data about the product. For example, the webhook data
          received.
      updated_at:
        type: string
    type: object
  status_model.ProductData:
    properties:
      biz_opaque_callback_data:
        description: Arbitrary string used for tracking messages, groups of messages,
          you name it...
        type: string
      conversation:
        allOf:
        - $ref: '#/definitions/webhook_model.Conversation'
        description: Information about the conversation.
      errors:
        description: An array of error objects describing the error. Error objects
          have the following properties, which map to their equivalent properties
          in API error response payloads.
        items:
          $ref: '#/definitions/common_model.Error'
        type: array
      id:
        description: The ID for the message that the business that is subscribed to
          the webhooks sent to a customer
        type: string
      pricing:
        allOf:
        - $ref: '#/definitions/common_model.Pricing'
        description: An object containing pricing information.
      recipient_id:
        description: The customer's WhatsApp ID. A business can respond to a customer
          using this ID. This ID may not match the customer's phone number, which
          is returned by the API as input when sending a message to the customer.
        type: string
      status:
        $ref: '#/definitions/message_model.SendingStatus'
      timestamp:
        description: Date for the status message
        type: string
    type: object
  status_model.StatusFields:
    properties:
      created_at:
        type: string
      id:
        type: string
      message_id:
        type: string
      product_data:
        allOf:
        - $ref: '#/definitions/status_model.ProductData'
        description: Specific data about the product. For example, the webhook data
          received.
      updated_at:
        type: string
    type: object
  template_model.ButtonData:
    properties:
      example:
        description: string or string array
      flow_action:
        type: string
      flow_id:
        type: string
      navigate_screen:
        type: string
      phone_number:
        type: string
      text:
        type: string
      type:
        $ref: '#/definitions/template_model.ButtonType'
      url:
        type: string
    type: object
  template_model.ButtonType:
    enum:
    - PHONE_NUMBER
    - URL
    - QUICK_REPLY
    - COPY_CODE
    - FLOW
    type: string
    x-enum-varnames:
    - PhoneNumber
    - Url
    - QuickReply
    - CopyCode
    - Flow
  template_model.Component:
    properties:
      index:
        description: Only for button type. This is actually an integer string.
        type: string
      parameters:
        items:
          $ref: '#/definitions/template_model.Parameter'
        type: array
      sub_type:
        allOf:
        - $ref: '#/definitions/message_type_common_model.ButtonSubType'
        description: Only for button type.
      type:
        $ref: '#/definitions/template_model.ComponentType'
    type: object
  template_model.ComponentExample:
    properties:
      body_text:
        items:
          items:
            type: string
          type: array
        type: array
      header_handle:
        items:
          type: string
        type: array
      header_text:
        items:
          type: string
        type: array
    type: object
  template_model.ComponentFormat:
    enum:
    - IMAGE
    - VIDEO
    - STICKER
    - DOCUMENT
    - AUDIO
    - TEXT
    type: string
    x-enum-varnames:
    - ImageFormat
    - VideoFormat
    - StickerFormat
    - DocumentFormat
    - AudioFormat
    - TextFormat
  template_model.ComponentType:
    enum:
    - HEADER
    - BODY
    - FOOTER
    - BUTTONS
    type: string
    x-enum-varnames:
    - Header
    - Body
    - Footer
    - Buttons
  template_model.GetTemplateResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/template_model.Template'
        type: array
      paging:
        $ref: '#/definitions/template_model.Paging'
      summary:
        $ref: '#/definitions/template_model.TemplateSummaryResponse'
    type: object
  template_model.Paging:
    properties:
      cursors:
        $ref: '#/definitions/common_model.GraphCursors'
      next:
        type: string
    type: object
  template_model.Parameter:
    properties:
      audio:
        $ref: '#/definitions/media_model.UseMedia'
      button:
        $ref: '#/definitions/message_type_common_model.ButtonData'
      currency:
        $ref: '#/definitions/message_type_common_model.Currency'
      date_time:
        $ref: '#/definitions/message_type_common_model.DateTime'
      document:
        $ref: '#/definitions/media_model.UseMedia'
      image:
        $ref: '#/definitions/media_model.UseMedia'
      sticker:
        $ref: '#/definitions/media_model.UseMedia'
      text:
        type: string
      type:
        $ref: '#/definitions/template_model.ParameterType'
      video:
        $ref: '#/definitions/media_model.UseMedia'
    type: object
  template_model.ParameterType:
    enum:
    - text
    - currency
    - date_time
    - image
    - video
    - sticker
    - document
    - button
    - payload
    type: string
    x-enum-varnames:
    - Text
    - Currency
    - DateTime
    - Image
    - Video
    - Sticker
    - Document
    - Button
    - Payload
  template_model.Template:
    properties:
      category:
        type: string
      components:
        items:
          $ref: '#/definitions/template_model.TemplateComponent'
        type: array
      id:
        type: string
      language:
        type: string
      name:
        type: string
      status:
        type: string
    type: object
  template_model.TemplateComponent:
    properties:
      audio:
        $ref: '#/definitions/media_model.UseMedia'
      buttons:
        items:
          $ref: '#/definitions/template_model.ButtonData'
        type: array
      currency:
        $ref: '#/definitions/message_type_common_model.Currency'
      date_time:
        $ref: '#/definitions/message_type_common_model.DateTime'
      document:
        $ref: '#/definitions/media_model.UseMedia'
      example:
        $ref: '#/definitions/template_model.ComponentExample'
      format:
        $ref: '#/definitions/template_model.ComponentFormat'
      image:
        $ref: '#/definitions/media_model.UseMedia'
      sticker:
        $ref: '#/definitions/media_model.UseMedia'
      text:
        type: string
      type:
        $ref: '#/definitions/template_model.ComponentType'
      video:
        $ref: '#/definitions/media_model.UseMedia'
    type: object
  template_model.TemplateFields:
    enum:
    - name
    - components
    - language
    - status
    - category
    - id
    type: string
    x-enum-varnames:
    - Name
    - Components
    - Language
    - TemplateStatus
    - Category
    - Id
  template_model.TemplateSummary:
    enum:
    - total_count
    - message_template_count
    - message_template_limit
    - are_translations_complete
    type: string
    x-enum-varnames:
    - TotalCount
    - MessageTemplateCount
    - MessageTemplateLimit
    - AreTranslationsComplete
  template_model.TemplateSummaryResponse:
    properties:
      are_translations_complete:
        type: boolean
      message_template_count:
        type: integer
      message_template_limit:
        type: integer
      total_count:
        type: integer
    type: object
  template_model.UseTemplate:
    properties:
      components:
        items:
          $ref: '#/definitions/template_model.Component'
        type: array
      language:
        $ref: '#/definitions/common_model.Language'
      name:
        type: string
    type: object
  user_entity.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  user_model.Create:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
    type: object
  user_model.UpdateWithId:
    properties:
      email:
        type: string
      id:
        description: The unique identifier.
        type: string
      name:
        type: string
      role:
        type: string
    type: object
  user_model.UpdateWithPassword:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  webhook_entity.Webhook:
    properties:
      authorization:
        type: string
      created_at:
        type: string
      event:
        type: string
      http_method:
        type: string
      id:
        type: string
      timeout:
        description: The timeout in seconds. 0 means no timeout
        type: integer
      updated_at:
        type: string
      url:
        type: string
    type: object
  webhook_entity.WebhookLog:
    properties:
      created_at:
        type: string
      http_response_code:
        type: integer
      id:
        type: string
      payload: {}
      response_data: {}
      updated_at:
        type: string
      webhook:
        $ref: '#/definitions/webhook_entity.Webhook'
      webhook_id:
        type: string
    type: object
  webhook_model.Change:
    properties:
      field:
        $ref: '#/definitions/webhook_model.Field'
      value:
        $ref: '#/definitions/webhook_model.Value'
    type: object
  webhook_model.Contact:
    properties:
      profile:
        $ref: '#/definitions/webhook_model.ContactProfile'
      wa_id:
        type: string
    type: object
  webhook_model.ContactProfile:
    properties:
      name:
        type: string
    type: object
  webhook_model.Conversation:
    properties:
      expiration_timestamp:
        type: string
      id:
        description: Represents the ID of the conversation the given status notification
          belongs to.
        type: string
      origin:
        allOf:
        - $ref: '#/definitions/webhook_model.Origin'
        description: Describes conversation category
    type: object
  webhook_model.CreateWebhook:
    properties:
      authorization:
        description: Optional authorization token
        type: string
      event:
        description: Event type associated with the webhook, required
        type: string
      http_method:
        enum:
        - GET
        - POST
        - PUT
        - DELETE
        - PATCH
        type: string
      timeout:
        minimum: 1
        type: integer
      url:
        description: Webhook URL, required and must be a valid URL
        type: string
    required:
    - event
    - http_method
    - url
    type: object
  webhook_model.Entry:
    properties:
      changes:
        items:
          $ref: '#/definitions/webhook_model.Change'
        type: array
      id:
        type: string
    type: object
  webhook_model.Field:
    enum:
    - account_alerts
    - business_capability_update
    - business_status_update
    - campaign_status_update
    - account_update
    - security
    - account_review_update
    - phone_number_quality_update
    - phone_number_name_update
    - partner_solutions
    - messaging_handovers
    - flows
    - message_echoes
    - template_category_update
    - message_template_quality_update
    - message_template_status_update
    - messages
    type: string
    x-enum-varnames:
    - AccountAlerts
    - BusinessCapabilityUpdate
    - BusinessStatusUpdate
    - CampaignStatusUpdate
    - AccountUpdate
    - Security
    - AccountReviewUpdate
    - PhoneNumberQualityUpdate
    - PhoneNumberNameUpdate
    - PartnerSolutions
    - MessagingHandovers
    - Flows
    - MessageEchoes
    - TemplateCategoryUpdate
    - MessageTemplateQualityUpdate
    - MessageTemplateStatusUpdate
    - Messages
  webhook_model.Metadata:
    properties:
      display_phone_number:
        type: string
      phone_number_id:
        type: string
    type: object
  webhook_model.Origin:
    properties:
      type:
        allOf:
        - $ref: '#/definitions/common_model.PricingCategory'
        description: Indicates conversation category. This can also be referred to
          as a conversation entry point
    type: object
  webhook_model.Status:
    properties:
      biz_opaque_callback_data:
        description: Arbitrary string used for tracking messages, groups of messages,
          you name it...
        type: string
      conversation:
        allOf:
        - $ref: '#/definitions/webhook_model.Conversation'
        description: Information about the conversation.
      errors:
        description: An array of error objects describing the error. Error objects
          have the following properties, which map to their equivalent properties
          in API error response payloads.
        items:
          $ref: '#/definitions/common_model.Error'
        type: array
      id:
        description: The ID for the message that the business that is subscribed to
          the webhooks sent to a customer
        type: string
      pricing:
        allOf:
        - $ref: '#/definitions/common_model.Pricing'
        description: An object containing pricing information.
      recipient_id:
        description: The customer's WhatsApp ID. A business can respond to a customer
          using this ID. This ID may not match the customer's phone number, which
          is returned by the API as input when sending a message to the customer.
        type: string
      status:
        $ref: '#/definitions/message_model.SendingStatus'
      timestamp:
        description: Date for the status message
        type: string
    type: object
  webhook_model.UpdateWebhook:
    properties:
      authorization:
        description: Optional updated authorization token
        type: string
      event:
        description: Optional updated event associated with the webhook
        type: string
      http_method:
        enum:
        - GET
        - POST
        - PUT
        - DELETE
        - PATCH
        type: string
      id:
        description: The unique identifier.
        type: string
      timeout:
        minimum: 1
        type: integer
      url:
        description: Optional updated URL, validated to be a valid URL
        type: string
    type: object
  webhook_model.Value:
    properties:
      contacts:
        items:
          $ref: '#/definitions/webhook_model.Contact'
        type: array
      errors:
        items:
          $ref: '#/definitions/common_model.Error'
        type: array
      messages:
        items:
          $ref: '#/definitions/message_model.MessageReceived'
        type: array
      messaging_product:
        description: Default is "whatsapp".
        type: string
      metadata:
        $ref: '#/definitions/webhook_model.Metadata'
      statuses:
        items:
          $ref: '#/definitions/webhook_model.Status'
        type: array
    type: object
  webhook_model.WebhookBody:
    properties:
      entry:
        items:
          $ref: '#/definitions/webhook_model.Entry'
        type: array
      object:
        allOf:
        - $ref: '#/definitions/common_model.BusinessAccount'
        description: The specific webhook a business is subscribed to. The webhook
          is whatsapp_business_account.
    type: object
host: localhost:6900
info:
  contact:
    email: development@astservia.io
    name: Astervia Dev Team
    url: https://github.com/Astervia
  description: Backend server for the wacraft project. Handles WhatsApp Cloud API
    operations, including message sending, receiving, and webhook handling.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: wacraft Server API
  version: 0.1.0
paths:
  /campaign:
    delete:
      consumes:
      - application/json
      description: Deletes a campaign using the provided ID in the request body.
      parameters:
      - description: Campaign ID to delete
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/common_model.RequiredId'
      produces:
      - application/json
      responses:
        "204":
          description: Campaign deleted successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Delete campaign
      tags:
      - Campaign
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of campaigns based on query parameters.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - in: query
        name: name
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of campaigns
          schema:
            items:
              $ref: '#/definitions/campaign_entity.Campaign'
            type: array
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: List campaigns (paginated)
      tags:
      - Campaign
    patch:
      consumes:
      - application/json
      description: Updates a campaign identified by its ID.
      parameters:
      - description: Updated campaign data
        in: body
        name: campaign
        required: true
        schema:
          $ref: '#/definitions/campaign_model.UpdateCampaign'
      produces:
      - application/json
      responses:
        "200":
          description: Updated campaign object
          schema:
            $ref: '#/definitions/campaign_entity.Campaign'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Update campaign
      tags:
      - Campaign
    post:
      consumes:
      - application/json
      description: Creates a new campaign and returns the created object.
      parameters:
      - description: Campaign data
        in: body
        name: campaign
        required: true
        schema:
          $ref: '#/definitions/campaign_model.CreateCampaign'
      produces:
      - application/json
      responses:
        "201":
          description: Created campaign
          schema:
            $ref: '#/definitions/campaign_entity.Campaign'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Create a new campaign
      tags:
      - Campaign
  /campaign/content/{keyName}/like/{likeText}:
    get:
      consumes:
      - application/json
      description: Applies a case-insensitive regex-like (~) filter on the specified
        key field and returns paginated results.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - in: query
        name: name
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Field name to apply the like operator (e.g., 'name')
        in: path
        name: keyName
        required: true
        type: string
      - description: Value to search using the like operator
        in: path
        name: likeText
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of matching campaigns
          schema:
            items:
              $ref: '#/definitions/campaign_entity.Campaign'
            type: array
        "400":
          description: Invalid input (e.g., decoding or query error)
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Search campaigns with regex-like operator
      tags:
      - Campaign
  /campaign/error:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of send errors associated with campaign
        messages.
      parameters:
      - in: query
        name: campaign_id
        type: string
      - in: query
        name: campaign_message_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of campaign message send errors
          schema:
            items:
              $ref: '#/definitions/campaign_entity.CampaignMessageSendError'
            type: array
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: List campaign message send errors
      tags:
      - Campaign Message Error
  /campaign/message:
    delete:
      consumes:
      - application/json
      description: Deletes a campaign message using the provided ID in the request
        body.
      parameters:
      - description: Campaign message ID to delete
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/common_model.RequiredId'
      produces:
      - application/json
      responses:
        "204":
          description: Campaign message deleted successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Delete campaign message
      tags:
      - Campaign Message
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of messages associated with campaigns.
      parameters:
      - in: query
        name: campaign_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: message_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of campaign messages
          schema:
            items:
              $ref: '#/definitions/campaign_entity.CampaignMessage'
            type: array
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: List campaign messages (paginated)
      tags:
      - Campaign Message
    post:
      consumes:
      - application/json
      description: Creates a new campaign message and returns the created object.
      parameters:
      - description: Campaign message data
        in: body
        name: campaign_message
        required: true
        schema:
          $ref: '#/definitions/campaign_model.CreateCampaignMessage'
      produces:
      - application/json
      responses:
        "201":
          description: Created campaign message
          schema:
            $ref: '#/definitions/campaign_entity.CampaignMessage'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Create a new campaign message
      tags:
      - Campaign Message
  /campaign/message/count:
    get:
      consumes:
      - application/json
      description: Counts campaign messages based on the query parameters.
      parameters:
      - in: query
        name: campaign_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - in: query
        name: message_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Count of campaign messages
          schema:
            type: integer
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Count campaign messages
      tags:
      - Campaign Message
  /campaign/message/count/sent:
    get:
      consumes:
      - application/json
      description: Counts campaign messages where message ID is not null.
      parameters:
      - in: query
        name: campaign_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - in: query
        name: message_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Count of sent campaign messages
          schema:
            type: integer
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Count sent campaign messages
      tags:
      - Campaign Message
  /campaign/message/count/unsent:
    get:
      consumes:
      - application/json
      description: Counts campaign messages where message ID is null.
      parameters:
      - in: query
        name: campaign_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - in: query
        name: message_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Count of unsent campaign messages
          schema:
            type: integer
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Count unsent campaign messages
      tags:
      - Campaign Message
  /campaign/message/sent:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of campaign messages that have been
        sent.
      parameters:
      - in: query
        name: campaign_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: message_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of sent campaign messages
          schema:
            items:
              $ref: '#/definitions/campaign_entity.CampaignMessage'
            type: array
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: List sent campaign messages
      tags:
      - Campaign Message
  /campaign/message/unsent:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of campaign messages that were not sent.
      parameters:
      - in: query
        name: campaign_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: message_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of unsent campaign messages
          schema:
            items:
              $ref: '#/definitions/campaign_entity.CampaignMessage'
            type: array
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: List unsent campaign messages
      tags:
      - Campaign Message
  /contact:
    delete:
      consumes:
      - application/json
      description: Deletes a contact based on the ID sent in the request body.
      parameters:
      - description: Contact ID to delete
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/common_model.RequiredId'
      produces:
      - application/json
      responses:
        "204":
          description: Contact deleted successfully
          schema:
            type: string
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Delete contact by ID
      tags:
      - Contact
    get:
      consumes:
      - application/json
      description: Returns a paginated list of contacts.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - in: query
        name: email
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: name
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: photo_path
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of contacts
          schema:
            items:
              $ref: '#/definitions/contact_entity.Contact'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Get contacts paginated
      tags:
      - Contact
    post:
      consumes:
      - application/json
      description: Creates a new contact and returns the created object.
      parameters:
      - description: Contact data
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/contact_model.CreateContact'
      produces:
      - application/json
      responses:
        "201":
          description: Created contact
          schema:
            $ref: '#/definitions/contact_entity.Contact'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Create a new contact
      tags:
      - Contact
    put:
      consumes:
      - application/json
      description: Updates a contact using the provided data and returns the updated
        object.
      parameters:
      - description: Contact data
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/contact_model.UpdateContact'
      produces:
      - application/json
      responses:
        "200":
          description: Edited contact
          schema:
            $ref: '#/definitions/contact_entity.Contact'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Edit a contact
      tags:
      - Contact
  /media/whatsapp/{mediaId}:
    get:
      consumes:
      - application/json
      description: Uses the WhatsApp API to get a temporary URL to download the media.
        The URL expires in 5 minutes.
      parameters:
      - description: Media ID
        in: path
        name: mediaId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media information with download URL
          schema:
            $ref: '#/definitions/media_model.MediaInfo'
        "400":
          description: Missing or invalid media ID
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to retrieve media URL
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Gets URL for WhatsApp media
      tags:
      - Media
  /media/whatsapp/download/{mediaId}:
    get:
      consumes:
      - application/json
      description: Downloads media using the URL retrieved via the WhatsApp API.
      parameters:
      - description: Media ID
        in: path
        name: mediaId
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Downloaded media file
          schema:
            type: file
        "400":
          description: Missing or invalid media ID
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to download media
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Downloads WhatsApp media
      tags:
      - Media
  /media/whatsapp/media-info/download:
    post:
      consumes:
      - application/json
      description: Receives MediaInfo JSON, downloads the media from the provided
        URL, and sends it back as a file.
      parameters:
      - description: Media Info with URL and metadata
        in: body
        name: mediaInfo
        required: true
        schema:
          $ref: '#/definitions/media_model.MediaInfo'
      produces:
      - application/octet-stream
      responses:
        "200":
          description: Downloaded media file
          schema:
            type: file
        "400":
          description: Invalid MediaInfo
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to download media
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Download media from MediaInfo
      tags:
      - Media
  /media/whatsapp/upload:
    post:
      consumes:
      - multipart/form-data
      description: Uploads media files to WhatsApp. Files persist for up to 30 days
        unless deleted earlier.
      parameters:
      - description: Media file
        in: formData
        name: file
        required: true
        type: file
      - description: MIME type of the media file
        in: formData
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Media ID returned from WhatsApp
          schema:
            $ref: '#/definitions/common_model.Id'
        "400":
          description: Missing file or MIME type
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "415":
          description: Unsupported media type
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to upload media
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Upload media file
      tags:
      - Media
  /message:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of messages based on filters such as sender,
        receiver, and messaging product.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - in: query
        name: from_id
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: to_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of messages
          schema:
            items:
              $ref: '#/definitions/message_entity.Message'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to retrieve messages
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Get messages paginated
      tags:
      - Message
  /message/content/{keyName}/like/{likeText}:
    get:
      consumes:
      - application/json
      description: Uses regex (~) to match the given text on a dynamic key field.
        The fields `from` and `to` are populated in the result.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - in: query
        name: from_id
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: to_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Field name to apply the like operator
        in: path
        name: keyName
        required: true
        type: string
      - description: Text to apply like operator
        in: path
        name: likeText
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of matched messages
          schema:
            items:
              $ref: '#/definitions/message_entity.Message'
            type: array
        "400":
          description: Invalid keyName, likeText, or query
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to query messages
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Queries message content like text paginated
      tags:
      - Message
  /message/content/like/{likeText}:
    get:
      consumes:
      - application/json
      description: Uses regex (~) to match the given text against `sender_data`, `receiver_data`,
        and `product_data` fields.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - in: query
        name: from_id
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: to_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Text to apply like operator
        in: path
        name: likeText
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of matched messages
          schema:
            items:
              $ref: '#/definitions/message_entity.Message'
            type: array
        "400":
          description: Invalid likeText or query
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to query messages
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Queries message content like text paginated
      tags:
      - Message
  /message/conversation:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of the latest messages per conversation,
        enriched with contact information.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - in: query
        name: from_id
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: to_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Latest messages per conversation
          schema:
            items:
              $ref: '#/definitions/message_entity.Message'
            type: array
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to retrieve conversations
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Get conversations
      tags:
      - Message conversation
  /message/conversation/count:
    get:
      consumes:
      - application/json
      description: Counts distinct conversations based on the provided filters.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - in: query
        name: from_id
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: to_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Count of distinct conversations
          schema:
            type: integer
        "400":
          description: Invalid query
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to count conversations
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Counts conversations
      tags:
      - Message conversation
  /message/conversation/count/messaging-product-contact/{messagingProductContactId}:
    get:
      consumes:
      - application/json
      description: Counts messages exchanged with the specified messaging product
        contact based on filters.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - in: query
        name: from_id
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: to_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Messaging product contact ID
        in: path
        name: messagingProductContactId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Count of messages
          schema:
            type: integer
        "400":
          description: Invalid query or ID
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to count messages
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Counts conversations by messaging product contact
      tags:
      - Message conversation
  /message/conversation/count/messaging-product-contact/{messagingProductContactId}/content/like/{likeText}:
    get:
      consumes:
      - application/json
      description: Counts messages from a messaging product contact matching a "like"
        pattern on sender/receiver/product data.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - in: query
        name: from_id
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: to_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Messaging product contact ID
        in: path
        name: messagingProductContactId
        required: true
        type: string
      - description: Substring to match against sender/receiver/product data
        in: path
        name: likeText
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Count of matched messages
          schema:
            type: integer
        "400":
          description: Invalid query or likeText
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to count messages
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Counts conversation messages by content
      tags:
      - Message conversation
  /message/conversation/messaging-product-contact/{messagingProductContactId}:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of messages sent or received by the specified
        messaging product contact.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - in: query
        name: from_id
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: to_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Messaging product contact ID
        in: path
        name: messagingProductContactId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Conversation messages
          schema:
            items:
              $ref: '#/definitions/message_entity.Message'
            type: array
        "400":
          description: Invalid query or ID
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to retrieve messages
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Get conversation messages
      tags:
      - Message conversation
  /message/conversation/messaging-product-contact/{messagingProductContactId}/content/like/{likeText}:
    get:
      consumes:
      - application/json
      description: Returns messages filtered by a "like" match on sender/receiver/product
        data fields.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - in: query
        name: from_id
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: to_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Messaging product contact ID
        in: path
        name: messagingProductContactId
        required: true
        type: string
      - description: Substring to match against sender/receiver/product data
        in: path
        name: likeText
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Filtered conversation messages
          schema:
            items:
              $ref: '#/definitions/message_entity.Message'
            type: array
        "400":
          description: Invalid ID, query, or likeText
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to retrieve messages
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Count conversation messages by content and messaging product contact
        ID
      tags:
      - Message conversation
  /message/count:
    get:
      consumes:
      - application/json
      description: Counts messages based on the query parameters.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - in: query
        name: from_id
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: to_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Count of messages
          schema:
            type: integer
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to count messages
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Counts messages
      tags:
      - Message
  /message/count/content/like/{likeText}:
    get:
      consumes:
      - application/json
      description: Counts messages where the given text matches fields such as sender_data,
        receiver_data, or product_data.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - in: query
        name: from_id
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: to_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Text to apply like operator on content fields
        in: path
        name: likeText
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Count of messages
          schema:
            type: integer
        "400":
          description: Invalid likeText or query
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to count messages
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Counts messages with content like comparison
      tags:
      - Message
  /message/whatsapp:
    post:
      consumes:
      - application/json
      description: Tries to send a WhatsApp message and stores it in the database
        if successful.
      parameters:
      - description: Message data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/message_model.SendWhatsAppMessage'
      produces:
      - application/json
      responses:
        "201":
          description: Message sent
          schema:
            $ref: '#/definitions/message_entity.Message'
        "400":
          description: Invalid message payload
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to send or save message
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Sends new message
      tags:
      - WhatsApp message
  /message/whatsapp/mark-as-read:
    post:
      consumes:
      - application/json
      description: Marks the latest message in a conversation as read so that the
        recipient sees the double blue tick in WhatsApp.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - in: query
        name: from_id
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: to_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success response
          schema:
            $ref: '#/definitions/common_model.SuccessResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to mark conversation as read
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Marks conversation as read to user
      tags:
      - WhatsApp message
  /message/whatsapp/wam-id/{wamId}:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of messages where the wamId matches and
        the query parameters are satisfied.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - in: query
        name: from_id
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: to_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Desired wamId to search for
        in: path
        name: wamId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of messages
          schema:
            items:
              $ref: '#/definitions/message_entity.Message'
            type: array
        "400":
          description: Invalid wamId or query
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to retrieve messages
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Queries messages by wamId
      tags:
      - WhatsApp message
  /messaging-product:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of messaging products.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - enum:
        - WhatsApp
        in: query
        name: name
        type: string
        x-enum-varnames:
        - WhatsApp
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of messaging products
          schema:
            items:
              $ref: '#/definitions/messaging_product_entity.MessagingProduct'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to retrieve products
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Get messaging products paginated
      tags:
      - Messaging product
  /messaging-product/contact:
    delete:
      consumes:
      - application/json
      description: Deletes a messaging product contact by their ID.
      parameters:
      - description: Messaging product contact ID to delete
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/common_model.RequiredId'
      produces:
      - application/json
      responses:
        "204":
          description: Messaging product contact deleted successfully
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to delete contact
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Delete messaging product contact by ID
      tags:
      - Messaging product contact
    get:
      consumes:
      - application/json
      description: Returns a paginated list of messaging product contacts, joining
        with the contact entity.
      parameters:
      - in: query
        name: blocked
        type: boolean
      - in: query
        name: contact_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: last_read_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: last_read_at_geq
        type: string
      - in: query
        name: last_read_at_leq
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of messaging product contacts
          schema:
            items:
              $ref: '#/definitions/messaging_product_entity.MessagingProductContact'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to retrieve contacts
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Get messaging products contacts paginated
      tags:
      - Messaging product contact
    post:
      consumes:
      - application/json
      description: Creates and stores a new contact associated with a messaging product.
      parameters:
      - description: Contact data
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/messaging_product_model.CreateContact'
      produces:
      - application/json
      responses:
        "201":
          description: Created contact
          schema:
            $ref: '#/definitions/messaging_product_entity.MessagingProductContact'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to create contact
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Creates a new messaging product contact
      tags:
      - Messaging product contact
  /messaging-product/contact/block:
    delete:
      consumes:
      - application/json
      description: Unblocks a messaging product contact by ID so it can send messages
        again.
      parameters:
      - description: Contact ID to unblock
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/common_model.RequiredId'
      produces:
      - application/json
      responses:
        "201":
          description: Unblocked contact
          schema:
            $ref: '#/definitions/messaging_product_entity.MessagingProductContact'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to unblock contact
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Unblocks a messaging product contact
      tags:
      - Messaging product contact
    patch:
      consumes:
      - application/json
      description: Blocks a messaging product contact by ID. Messages from this contact
        will be ignored.
      parameters:
      - description: Contact ID to block
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/common_model.RequiredId'
      produces:
      - application/json
      responses:
        "201":
          description: Blocked contact
          schema:
            $ref: '#/definitions/messaging_product_entity.MessagingProductContact'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to block contact
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Blocks a messaging product contact
      tags:
      - Messaging product contact
  /messaging-product/contact/content/like/{likeText}:
    get:
      consumes:
      - application/json
      description: Uses the ~ operator (regex) to match the provided text in contact
        name, email, and product_details fields.
      parameters:
      - in: query
        name: blocked
        type: boolean
      - in: query
        name: contact_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: last_read_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: last_read_at_geq
        type: string
      - in: query
        name: last_read_at_leq
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: messaging_product_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Text to apply like (~) operator
        in: path
        name: likeText
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of matching contacts
          schema:
            items:
              $ref: '#/definitions/messaging_product_entity.MessagingProductContact'
            type: array
        "400":
          description: Invalid query or likeText
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to retrieve contacts
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Get messaging products contacts paginated
      tags:
      - Messaging product contact
  /messaging-product/contact/count/content/like/{likeText}:
    get:
      consumes:
      - application/json
      description: Uses the ~ operator (regex) to match the provided text in contact
        name, email, and product_details fields.
      parameters:
      - in: query
        name: blocked
        type: boolean
      - in: query
        name: contact_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: last_read_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: last_read_at_geq
        type: string
      - in: query
        name: last_read_at_leq
        type: string
      - in: query
        name: messaging_product_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Text to match using like (~) operator
        in: path
        name: likeText
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Count of matching contacts
          schema:
            type: integer
        "400":
          description: Invalid query or likeText
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to count contacts
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Counts messaging product contacts with text comparison
      tags:
      - Messaging product contact
  /messaging-product/contact/last-read-at/{messagingProductContactId}:
    put:
      consumes:
      - application/json
      description: Sets the `last_read_at` timestamp of the contact as the current
        date and time.
      parameters:
      - description: Messaging product contact ID
        in: path
        name: messagingProductContactId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Updated messaging product contact
          schema:
            $ref: '#/definitions/messaging_product_entity.MessagingProductContact'
        "400":
          description: Invalid contact ID format
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to update last_read_at
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Sets last_read_at of the messaging_product_contact
      tags:
      - Messaging product contact
  /messaging-product/contact/whatsapp:
    get:
      consumes:
      - application/json
      description: Queries a paginated list of WhatsApp messaging product contacts,
        including WhatsApp-specific fields and joining with the contact entity.
      parameters:
      - in: query
        name: contact_id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: last_read_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: last_read_at_geq
        type: string
      - in: query
        name: last_read_at_leq
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: phone_number
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - in: query
        name: wa_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of WhatsApp messaging product contacts
          schema:
            items:
              $ref: '#/definitions/messaging_product_entity.MessagingProductContact'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to retrieve WhatsApp contacts
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Get WhatsApp messaging products contacts paginated
      tags:
      - Messaging product contact
    post:
      consumes:
      - application/json
      description: Creates and stores a new WhatsApp contact associated with a messaging
        product, using WhatsApp-specific product details.
      parameters:
      - description: Contact data
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/messaging_product_model.CreateWhatsAppContact'
      produces:
      - application/json
      responses:
        "201":
          description: Created contact
          schema:
            $ref: '#/definitions/messaging_product_entity.MessagingProductContact'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to create contact
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Creates a new messaging product WhatsApp contact
      tags:
      - Messaging product contact
  /status:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of statuses.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: message_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of statuses
          schema:
            items:
              $ref: '#/definitions/status_entity.Status'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to retrieve statuses
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Get statuses paginated
      tags:
      - Status
  /status/content/{keyName}/like/{likeText}:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of statuses. The query is based on the
        like operator applied to the given key.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: message_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: The key to apply like operator
        in: path
        name: keyName
        required: true
        type: string
      - description: Text to apply like operator on the given key
        in: path
        name: likeText
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of statuses
          schema:
            items:
              $ref: '#/definitions/status_entity.Status'
            type: array
        "400":
          description: Invalid query or path parameter
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to retrieve statuses
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Queries status content like text paginated
      tags:
      - Status
  /status/content/like/{likeText}:
    get:
      consumes:
      - application/json
      description: Uses regex with the ~ operator to query text at the key. The query
        is based on the like operator on the fields sender_data, receiver_data, and
        product_data.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: message_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Text to apply like operator on sender_data, receiver_data, and
          product_data fields
        in: path
        name: likeText
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of statuses
          schema:
            items:
              $ref: '#/definitions/status_entity.Status'
            type: array
        "400":
          description: Invalid query or path parameter
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to retrieve statuses
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Queries status content like text paginated
      tags:
      - Status
  /status/count:
    get:
      consumes:
      - application/json
      description: Counts statuses based on the query parameters.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: message_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Count of statuses
          schema:
            type: integer
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to count statuses
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Counts statuses
      tags:
      - Status
  /status/whatsapp/wam-id/{wamId}:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of statuses matching the given wamId and
        query parameters.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: deleted_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: deleted_at_geq
        type: string
      - in: query
        name: deleted_at_leq
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: message_id
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Desired wamId
        in: path
        name: wamId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of statuses
          schema:
            items:
              $ref: '#/definitions/status_entity.Status'
            type: array
        "400":
          description: Invalid wamId or query parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Failed to fetch statuses
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Queries statuses by wamId
      tags:
      - WhatsApp status
  /user:
    delete:
      consumes:
      - application/json
      description: Deletes a user by their ID (only accessible by admins). You cannot
        delete su@sudo
      parameters:
      - description: User ID to delete
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/common_model.RequiredId'
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "401":
          description: Cannot delete su@sudo user
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Delete user by ID
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Returns a paginated list of users
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - in: query
        name: email
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: name
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: role
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/user_entity.User'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Get users paginated
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Creates a new user account
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user_model.Create'
      produces:
      - application/json
      responses:
        "201":
          description: Created user
          schema:
            $ref: '#/definitions/user_entity.User'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Creates a new user
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Updates a user's details by their ID (accessible by superuser)
      parameters:
      - description: User data to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user_model.UpdateWithId'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/user_entity.User'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Update user by ID
      tags:
      - User
  /user/content/{keyName}/like/{likeText}:
    get:
      consumes:
      - application/json
      description: Uses regex with the ~ operator to query text at the key.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - in: query
        name: email
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - in: query
        name: name
        type: string
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: role
        type: string
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Text to apply like operator on the given key
        in: path
        name: likeText
        required: true
        type: string
      - description: The key to apply like operator
        in: path
        name: keyName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/user_entity.User'
            type: array
        "400":
          description: Invalid path or query parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Queries user key like text paginated
      tags:
      - User
  /user/me:
    delete:
      description: Deletes the user who made the request
      responses:
        "204":
          description: No content
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Delete current user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Returns the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Current user
          schema:
            $ref: '#/definitions/user_entity.User'
        "401":
          description: Unauthorized or invalid user context
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Gets current user
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Updates the details of the user who made the request
      parameters:
      - description: User data to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user_model.UpdateWithPassword'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Update current user
      tags:
      - User
  /user/oauth/token:
    post:
      consumes:
      - application/json
      description: Issues access and refresh tokens based on grant type.
      parameters:
      - description: OAuth token request
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth_model.TokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token issued successfully
          schema:
            $ref: '#/definitions/auth_model.TokenResponse'
        "400":
          description: Bad request or missing fields
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "401":
          description: Unauthorized or invalid credentials
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: OAuth 2.0 Token Endpoint
      tags:
      - Auth
  /webhook:
    delete:
      consumes:
      - application/json
      description: Deletes a webhook by its ID
      parameters:
      - description: Webhook ID to delete
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/common_model.RequiredId'
      produces:
      - application/json
      responses:
        "204":
          description: Webhook deleted successfully
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Delete webhook by ID
      tags:
      - Webhook
    get:
      consumes:
      - application/json
      description: Returns a paginated list of webhooks
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: Optional event filter
        in: query
        name: event
        type: string
      - description: Optional HTTP method filter
        in: query
        name: http_method
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: timeout
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Optional URL filter
        in: query
        name: url
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of webhooks
          schema:
            items:
              $ref: '#/definitions/webhook_entity.Webhook'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Get webhooks paginated
      tags:
      - Webhook
    post:
      consumes:
      - application/json
      description: Creates a new webhook with the specified URL, authorization, and
        event type
      parameters:
      - description: Webhook data
        in: body
        name: webhook
        required: true
        schema:
          $ref: '#/definitions/webhook_model.CreateWebhook'
      produces:
      - application/json
      responses:
        "201":
          description: Created webhook
          schema:
            $ref: '#/definitions/webhook_entity.Webhook'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Create a new webhook
      tags:
      - Webhook
    put:
      consumes:
      - application/json
      description: Edits a webhook based on its ID with updated URL, authorization,
        and event type
      parameters:
      - description: Updated webhook data
        in: body
        name: webhook
        required: true
        schema:
          $ref: '#/definitions/webhook_model.UpdateWebhook'
      produces:
      - application/json
      responses:
        "200":
          description: Edited webhook
          schema:
            $ref: '#/definitions/webhook_entity.Webhook'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Edit an existing webhook
      tags:
      - Webhook
  /webhook-in:
    get:
      consumes:
      - application/json
      description: Used by meta to verify if it is a valid webhook endpoint.
      parameters:
      - description: Subscription mode, always set to 'subscribe'
        in: query
        name: hub.mode
        required: true
        type: string
      - description: A challenge integer that must be returned to confirm the webhook
        in: query
        name: hub.challenge
        required: true
        type: integer
      - description: A string used for validation, defined in the Webhooks setup in
          the App Dashboard
        in: query
        name: hub.verify_token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: hub.challenge returned as a string.
          schema:
            type: string
      summary: Verify Webhook.
      tags:
      - Webhook In
    post:
      consumes:
      - application/json
      description: Executes the context handler then the change handlers. If any error
        is thrown this function will also throw an error.
      parameters:
      - description: Content sent by WhatsApp Cloud API.
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/webhook_model.WebhookBody'
      produces:
      - application/json
      responses:
        "200":
          description: Valid webhook endpoint.
      summary: Handles Webhooks.
      tags:
      - Webhook In
  /webhook/content/{keyName}/like/{likeText}:
    get:
      consumes:
      - application/json
      description: Uses regex with the ~ operator to query text at the key.
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - description: Optional event filter
        in: query
        name: event
        type: string
      - description: Optional HTTP method filter
        in: query
        name: http_method
        type: string
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - in: query
        name: timeout
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - description: Optional URL filter
        in: query
        name: url
        type: string
      - description: Text to apply like operator on the given key
        in: path
        name: likeText
        required: true
        type: string
      - description: The key to apply like operator
        in: path
        name: keyName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of webhooks
          schema:
            items:
              $ref: '#/definitions/webhook_entity.Webhook'
            type: array
        "400":
          description: Invalid query or path parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Queries webhook key like text paginated
      tags:
      - Webhook
  /webhook/log:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of webhook logs
      parameters:
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: created_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: created_at_geq
        type: string
      - in: query
        name: created_at_leq
        type: string
      - in: query
        name: http_response_code
        type: integer
      - description: The unique identifier
        in: query
        name: id
        type: string
      - default: 10
        description: Number of items to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: The offset from where to start the items
        in: query
        name: offset
        type: integer
      - default: desc
        enum:
        - asc
        - desc
        in: query
        name: updated_at
        type: string
        x-enum-varnames:
        - Asc
        - Desc
      - in: query
        name: updated_at_geq
        type: string
      - in: query
        name: updated_at_leq
        type: string
      - in: query
        name: webhook_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of webhook logs
          schema:
            items:
              $ref: '#/definitions/webhook_entity.WebhookLog'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Get webhook logs paginated
      tags:
      - Webhook log
  /websocket/{messageChannel}:
    get:
      consumes:
      - application/json
      description: All websocket routes with the "websocket" prefix are authenticated
        with this user middleware. messageChannel is the channel that the user wants
        to subscribe to.
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful
      security:
      - ApiKeyAuth: []
      summary: Authenticates websocket handshake
      tags:
      - Websocket
  /websocket/campaign/whatsapp/send/{campaignId}:
    get:
      consumes:
      - application/json
      description: Upgrades to WebSocket to send a campaign and receive real-time
        status and results.
      parameters:
      - description: Campaign ID
        in: path
        name: campaignId
        required: true
        type: string
      - description: 'Optional: customize message send behavior'
        in: body
        name: function
        schema:
          type: string
      produces:
      - application/json
      responses:
        "101":
          description: WebSocket connection established
          schema:
            type: string
        "400":
          description: Invalid campaign ID or bad request
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Send WhatsApp campaign via WebSocket
      tags:
      - Campaign Websocket
  /websocket/message/new:
    get:
      consumes:
      - application/json
      description: Upgrades the connection to WebSocket. Streams messages sent or
        received in real-time.
      produces:
      - application/json
      responses:
        "101":
          description: WebSocket connection established
          schema:
            type: string
        "400":
          description: Invalid connection request
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Watches for new messages
      tags:
      - Message Websocket
  /websocket/status/new:
    get:
      consumes:
      - application/json
      description: WebSocket route that allows the user to watch for incoming message
        status updates.
      produces:
      - application/json
      responses:
        "200":
          description: Status update received
          schema:
            $ref: '#/definitions/status_entity.Status'
        "400":
          description: Invalid WebSocket handshake
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Watches for new statuses
      tags:
      - Status Websocket
  /whatsapp-template:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of templates for WhatsApp using graph
        API pagination.
      parameters:
      - description: Used to paginate.
        in: query
        name: after
        type: string
      - description: Used to paginate.
        in: query
        name: before
        type: string
      - in: query
        name: category
        type: string
      - in: query
        name: content
        type: string
      - collectionFormat: csv
        description: Fields to be returned.
        in: query
        items:
          enum:
          - name
          - components
          - language
          - status
          - category
          - id
          type: string
        name: fields
        type: array
      - in: query
        name: language
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: name
        type: string
      - in: query
        name: name_or_content
        type: string
      - in: query
        name: status
        type: string
      - collectionFormat: csv
        description: Summary to be returned.
        in: query
        items:
          enum:
          - total_count
          - message_template_count
          - message_template_limit
          - are_translations_complete
          type: string
        name: summary
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: List of templates
          schema:
            items:
              $ref: '#/definitions/template_model.GetTemplateResponse'
            type: array
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
        "500":
          description: Unable to get templates from API
          schema:
            $ref: '#/definitions/common_model.DescriptiveError'
      security:
      - ApiKeyAuth: []
      summary: Get templates paginated
      tags:
      - WhatsApp template
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
