// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Astervia Dev Team",
            "url": "https://github.com/Astervia",
            "email": "development@astservia.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/campaign": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of campaigns based on query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign"
                ],
                "summary": "List campaigns (paginated)",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of campaigns",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/campaign_entity.Campaign"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new campaign and returns the created object.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign"
                ],
                "summary": "Create a new campaign",
                "parameters": [
                    {
                        "description": "Campaign data",
                        "name": "campaign",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/campaign_model.CreateCampaign"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created campaign",
                        "schema": {
                            "$ref": "#/definitions/campaign_entity.Campaign"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a campaign using the provided ID in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign"
                ],
                "summary": "Delete campaign",
                "parameters": [
                    {
                        "description": "Campaign ID to delete",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/common_model.RequiredId"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Campaign deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a campaign identified by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign"
                ],
                "summary": "Update campaign",
                "parameters": [
                    {
                        "description": "Updated campaign data",
                        "name": "campaign",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/campaign_model.UpdateCampaign"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated campaign object",
                        "schema": {
                            "$ref": "#/definitions/campaign_entity.Campaign"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/campaign/content/{keyName}/like/{likeText}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Applies a case-insensitive regex-like (~) filter on the specified key field and returns paginated results.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign"
                ],
                "summary": "Search campaigns with regex-like operator",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Field name to apply the like operator (e.g., 'name')",
                        "name": "keyName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Value to search using the like operator",
                        "name": "likeText",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of matching campaigns",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/campaign_entity.Campaign"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input (e.g., decoding or query error)",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/campaign/error": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of send errors associated with campaign messages.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign Message Error"
                ],
                "summary": "List campaign message send errors",
                "parameters": [
                    {
                        "type": "string",
                        "name": "campaign_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "campaign_message_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of campaign message send errors",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/campaign_entity.CampaignMessageSendError"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/campaign/message": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of messages associated with campaigns.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign Message"
                ],
                "summary": "List campaign messages (paginated)",
                "parameters": [
                    {
                        "type": "string",
                        "name": "campaign_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "message_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of campaign messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/campaign_entity.CampaignMessage"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new campaign message and returns the created object.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign Message"
                ],
                "summary": "Create a new campaign message",
                "parameters": [
                    {
                        "description": "Campaign message data",
                        "name": "campaign_message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/campaign_model.CreateCampaignMessage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created campaign message",
                        "schema": {
                            "$ref": "#/definitions/campaign_entity.CampaignMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a campaign message using the provided ID in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign Message"
                ],
                "summary": "Delete campaign message",
                "parameters": [
                    {
                        "description": "Campaign message ID to delete",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/common_model.RequiredId"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Campaign message deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/campaign/message/count": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Counts campaign messages based on the query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign Message"
                ],
                "summary": "Count campaign messages",
                "parameters": [
                    {
                        "type": "string",
                        "name": "campaign_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "message_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of campaign messages",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Invalid query",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/campaign/message/count/sent": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Counts campaign messages where message ID is not null.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign Message"
                ],
                "summary": "Count sent campaign messages",
                "parameters": [
                    {
                        "type": "string",
                        "name": "campaign_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "message_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of sent campaign messages",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Invalid query",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/campaign/message/count/unsent": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Counts campaign messages where message ID is null.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign Message"
                ],
                "summary": "Count unsent campaign messages",
                "parameters": [
                    {
                        "type": "string",
                        "name": "campaign_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "message_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of unsent campaign messages",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Invalid query",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/campaign/message/sent": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of campaign messages that have been sent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign Message"
                ],
                "summary": "List sent campaign messages",
                "parameters": [
                    {
                        "type": "string",
                        "name": "campaign_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "message_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of sent campaign messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/campaign_entity.CampaignMessage"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/campaign/message/unsent": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of campaign messages that were not sent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign Message"
                ],
                "summary": "List unsent campaign messages",
                "parameters": [
                    {
                        "type": "string",
                        "name": "campaign_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "message_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of unsent campaign messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/campaign_entity.CampaignMessage"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/contact": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a paginated list of contacts.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contact"
                ],
                "summary": "Get contacts paginated",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "photo_path",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of contacts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/contact_entity.Contact"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a contact using the provided data and returns the updated object.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contact"
                ],
                "summary": "Edit a contact",
                "parameters": [
                    {
                        "description": "Contact data",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contact_model.UpdateContact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Edited contact",
                        "schema": {
                            "$ref": "#/definitions/contact_entity.Contact"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new contact and returns the created object.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contact"
                ],
                "summary": "Create a new contact",
                "parameters": [
                    {
                        "description": "Contact data",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contact_model.CreateContact"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created contact",
                        "schema": {
                            "$ref": "#/definitions/contact_entity.Contact"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a contact based on the ID sent in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contact"
                ],
                "summary": "Delete contact by ID",
                "parameters": [
                    {
                        "description": "Contact ID to delete",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/common_model.RequiredId"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Contact deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/media/whatsapp/download/{mediaId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Downloads media using the URL retrieved via the WhatsApp API.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Media"
                ],
                "summary": "Downloads WhatsApp media",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Media ID",
                        "name": "mediaId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Downloaded media file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid media ID",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to download media",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/media/whatsapp/media-info/download": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Receives MediaInfo JSON, downloads the media from the provided URL, and sends it back as a file.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Media"
                ],
                "summary": "Download media from MediaInfo",
                "parameters": [
                    {
                        "description": "Media Info with URL and metadata",
                        "name": "mediaInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/media_model.MediaInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Downloaded media file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Invalid MediaInfo",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to download media",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/media/whatsapp/upload": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Uploads media files to WhatsApp. Files persist for up to 30 days unless deleted earlier.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Media"
                ],
                "summary": "Upload media file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Media file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "MIME type of the media file",
                        "name": "type",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media ID returned from WhatsApp",
                        "schema": {
                            "$ref": "#/definitions/common_model.Id"
                        }
                    },
                    "400": {
                        "description": "Missing file or MIME type",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "415": {
                        "description": "Unsupported media type",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to upload media",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/media/whatsapp/{mediaId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Uses the WhatsApp API to get a temporary URL to download the media. The URL expires in 5 minutes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Media"
                ],
                "summary": "Gets URL for WhatsApp media",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Media ID",
                        "name": "mediaId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Media information with download URL",
                        "schema": {
                            "$ref": "#/definitions/media_model.MediaInfo"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid media ID",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve media URL",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/message": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a paginated list of messages based on filters such as sender, receiver, and messaging product.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "Get messages paginated",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/message_entity.Message"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve messages",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/message/content/like/{likeText}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Uses regex (~) to match the given text against ` + "`" + `sender_data` + "`" + `, ` + "`" + `receiver_data` + "`" + `, and ` + "`" + `product_data` + "`" + ` fields.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "Queries message content like text paginated",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Text to apply like operator",
                        "name": "likeText",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of matched messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/message_entity.Message"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid likeText or query",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to query messages",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/message/content/{keyName}/like/{likeText}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Uses regex (~) to match the given text on a dynamic key field. The fields ` + "`" + `from` + "`" + ` and ` + "`" + `to` + "`" + ` are populated in the result.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "Queries message content like text paginated",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Field name to apply the like operator",
                        "name": "keyName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Text to apply like operator",
                        "name": "likeText",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of matched messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/message_entity.Message"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid keyName, likeText, or query",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to query messages",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/message/conversation": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a paginated list of the latest messages per conversation, enriched with contact information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message conversation"
                ],
                "summary": "Get conversations",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Latest messages per conversation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/message_entity.Message"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve conversations",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/message/conversation/count": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Counts distinct conversations based on the provided filters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message conversation"
                ],
                "summary": "Counts conversations",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of distinct conversations",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Invalid query",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to count conversations",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/message/conversation/count/messaging-product-contact/{messagingProductContactId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Counts messages exchanged with the specified messaging product contact based on filters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message conversation"
                ],
                "summary": "Counts conversations by messaging product contact",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Messaging product contact ID",
                        "name": "messagingProductContactId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of messages",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Invalid query or ID",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to count messages",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/message/conversation/count/messaging-product-contact/{messagingProductContactId}/content/like/{likeText}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Counts messages from a messaging product contact matching a \"like\" pattern on sender/receiver/product data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message conversation"
                ],
                "summary": "Counts conversation messages by content",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Messaging product contact ID",
                        "name": "messagingProductContactId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Substring to match against sender/receiver/product data",
                        "name": "likeText",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of matched messages",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Invalid query or likeText",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to count messages",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/message/conversation/messaging-product-contact/{messagingProductContactId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a paginated list of messages sent or received by the specified messaging product contact.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message conversation"
                ],
                "summary": "Get conversation messages",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Messaging product contact ID",
                        "name": "messagingProductContactId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Conversation messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/message_entity.Message"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query or ID",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve messages",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/message/conversation/messaging-product-contact/{messagingProductContactId}/content/like/{likeText}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns messages filtered by a \"like\" match on sender/receiver/product data fields.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message conversation"
                ],
                "summary": "Count conversation messages by content and messaging product contact ID",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Messaging product contact ID",
                        "name": "messagingProductContactId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Substring to match against sender/receiver/product data",
                        "name": "likeText",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Filtered conversation messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/message_entity.Message"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID, query, or likeText",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve messages",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/message/count": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Counts messages based on the query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "Counts messages",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of messages",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to count messages",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/message/count/content/like/{likeText}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Counts messages where the given text matches fields such as sender_data, receiver_data, or product_data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message"
                ],
                "summary": "Counts messages with content like comparison",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Text to apply like operator on content fields",
                        "name": "likeText",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of messages",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Invalid likeText or query",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to count messages",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/message/whatsapp": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Tries to send a WhatsApp message and stores it in the database if successful.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WhatsApp message"
                ],
                "summary": "Sends new message",
                "parameters": [
                    {
                        "description": "Message data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/message_model.SendWhatsAppMessage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Message sent",
                        "schema": {
                            "$ref": "#/definitions/message_entity.Message"
                        }
                    },
                    "400": {
                        "description": "Invalid message payload",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to send or save message",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/message/whatsapp/mark-as-read": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Marks the latest message in a conversation as read so that the recipient sees the double blue tick in WhatsApp.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WhatsApp message"
                ],
                "summary": "Marks conversation as read to user",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "$ref": "#/definitions/common_model.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to mark conversation as read",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/message/whatsapp/wam-id/{wamId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a paginated list of messages where the wamId matches and the query parameters are satisfied.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WhatsApp message"
                ],
                "summary": "Queries messages by wamId",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "from_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "to_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Desired wamId to search for",
                        "name": "wamId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of messages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/message_entity.Message"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid wamId or query",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve messages",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/messaging-product": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a paginated list of messaging products.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging product"
                ],
                "summary": "Get messaging products paginated",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "WhatsApp"
                        ],
                        "type": "string",
                        "x-enum-varnames": [
                            "WhatsApp"
                        ],
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of messaging products",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/messaging_product_entity.MessagingProduct"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve products",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/messaging-product/contact": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a paginated list of messaging product contacts, joining with the contact entity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging product contact"
                ],
                "summary": "Get messaging products contacts paginated",
                "parameters": [
                    {
                        "type": "boolean",
                        "name": "blocked",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "contact_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "last_read_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "last_read_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "last_read_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of messaging product contacts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/messaging_product_entity.MessagingProductContact"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve contacts",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates and stores a new contact associated with a messaging product.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging product contact"
                ],
                "summary": "Creates a new messaging product contact",
                "parameters": [
                    {
                        "description": "Contact data",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/messaging_product_model.CreateContact"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created contact",
                        "schema": {
                            "$ref": "#/definitions/messaging_product_entity.MessagingProductContact"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to create contact",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a messaging product contact by their ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging product contact"
                ],
                "summary": "Delete messaging product contact by ID",
                "parameters": [
                    {
                        "description": "Messaging product contact ID to delete",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/common_model.RequiredId"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Messaging product contact deleted successfully"
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to delete contact",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/messaging-product/contact/block": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Unblocks a messaging product contact by ID so it can send messages again.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging product contact"
                ],
                "summary": "Unblocks a messaging product contact",
                "parameters": [
                    {
                        "description": "Contact ID to unblock",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/common_model.RequiredId"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Unblocked contact",
                        "schema": {
                            "$ref": "#/definitions/messaging_product_entity.MessagingProductContact"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to unblock contact",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Blocks a messaging product contact by ID. Messages from this contact will be ignored.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging product contact"
                ],
                "summary": "Blocks a messaging product contact",
                "parameters": [
                    {
                        "description": "Contact ID to block",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/common_model.RequiredId"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Blocked contact",
                        "schema": {
                            "$ref": "#/definitions/messaging_product_entity.MessagingProductContact"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to block contact",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/messaging-product/contact/content/like/{likeText}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Uses the ~ operator (regex) to match the provided text in contact name, email, and product_details fields.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging product contact"
                ],
                "summary": "Get messaging products contacts paginated",
                "parameters": [
                    {
                        "type": "boolean",
                        "name": "blocked",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "contact_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "last_read_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "last_read_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "last_read_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Text to apply like (~) operator",
                        "name": "likeText",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of matching contacts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/messaging_product_entity.MessagingProductContact"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query or likeText",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve contacts",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/messaging-product/contact/count/content/like/{likeText}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Uses the ~ operator (regex) to match the provided text in contact name, email, and product_details fields.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging product contact"
                ],
                "summary": "Counts messaging product contacts with text comparison",
                "parameters": [
                    {
                        "type": "boolean",
                        "name": "blocked",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "contact_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "last_read_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "last_read_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "last_read_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "messaging_product_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Text to match using like (~) operator",
                        "name": "likeText",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of matching contacts",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Invalid query or likeText",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to count contacts",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/messaging-product/contact/last-read-at/{messagingProductContactId}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Sets the ` + "`" + `last_read_at` + "`" + ` timestamp of the contact as the current date and time.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging product contact"
                ],
                "summary": "Sets last_read_at of the messaging_product_contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Messaging product contact ID",
                        "name": "messagingProductContactId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated messaging product contact",
                        "schema": {
                            "$ref": "#/definitions/messaging_product_entity.MessagingProductContact"
                        }
                    },
                    "400": {
                        "description": "Invalid contact ID format",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to update last_read_at",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/messaging-product/contact/whatsapp": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Queries a paginated list of WhatsApp messaging product contacts, including WhatsApp-specific fields and joining with the contact entity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging product contact"
                ],
                "summary": "Get WhatsApp messaging products contacts paginated",
                "parameters": [
                    {
                        "type": "string",
                        "name": "contact_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "last_read_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "last_read_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "last_read_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "phone_number",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "wa_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of WhatsApp messaging product contacts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/messaging_product_entity.MessagingProductContact"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve WhatsApp contacts",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates and stores a new WhatsApp contact associated with a messaging product, using WhatsApp-specific product details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messaging product contact"
                ],
                "summary": "Creates a new messaging product WhatsApp contact",
                "parameters": [
                    {
                        "description": "Contact data",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/messaging_product_model.CreateWhatsAppContact"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created contact",
                        "schema": {
                            "$ref": "#/definitions/messaging_product_entity.MessagingProductContact"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to create contact",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a paginated list of statuses.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Status"
                ],
                "summary": "Get statuses paginated",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "message_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of statuses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/status_entity.Status"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve statuses",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/status/content/like/{likeText}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Uses regex with the ~ operator to query text at the key. The query is based on the like operator on the fields sender_data, receiver_data, and product_data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Status"
                ],
                "summary": "Queries status content like text paginated",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "message_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Text to apply like operator on sender_data, receiver_data, and product_data fields",
                        "name": "likeText",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of statuses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/status_entity.Status"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query or path parameter",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve statuses",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/status/content/{keyName}/like/{likeText}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a paginated list of statuses. The query is based on the like operator applied to the given key.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Status"
                ],
                "summary": "Queries status content like text paginated",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "message_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The key to apply like operator",
                        "name": "keyName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Text to apply like operator on the given key",
                        "name": "likeText",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of statuses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/status_entity.Status"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query or path parameter",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve statuses",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/status/count": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Counts statuses based on the query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Status"
                ],
                "summary": "Counts statuses",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "message_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Count of statuses",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to count statuses",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/status/whatsapp/wam-id/{wamId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a paginated list of statuses matching the given wamId and query parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WhatsApp status"
                ],
                "summary": "Queries statuses by wamId",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "deleted_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "deleted_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "message_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Desired wamId",
                        "name": "wamId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of statuses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/status_entity.Status"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid wamId or query parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch statuses",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a paginated list of users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get users paginated",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user_entity.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a user's details by their ID (accessible by superuser)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user by ID",
                "parameters": [
                    {
                        "description": "User data to update",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_model.UpdateWithId"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/user_entity.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Creates a new user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_model.Create"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created user",
                        "schema": {
                            "$ref": "#/definitions/user_entity.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a user by their ID (only accessible by admins). You cannot delete su@sudo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete user by ID",
                "parameters": [
                    {
                        "description": "User ID to delete",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/common_model.RequiredId"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "401": {
                        "description": "Cannot delete su@sudo user",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/user/content/{keyName}/like/{likeText}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Uses regex with the ~ operator to query text at the key.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Queries user key like text paginated",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Text to apply like operator on the given key",
                        "name": "likeText",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The key to apply like operator",
                        "name": "keyName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user_entity.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid path or query parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Gets current user",
                "responses": {
                    "200": {
                        "description": "Current user",
                        "schema": {
                            "$ref": "#/definitions/user_entity.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid user context",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the details of the user who made the request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update current user",
                "parameters": [
                    {
                        "description": "User data to update",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user_model.UpdateWithPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes the user who made the request",
                "tags": [
                    "User"
                ],
                "summary": "Delete current user",
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/user/oauth/token": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Issues access and refresh tokens based on grant type.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "OAuth 2.0 Token Endpoint",
                "parameters": [
                    {
                        "description": "OAuth token request",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth_model.TokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token issued successfully",
                        "schema": {
                            "$ref": "#/definitions/auth_model.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request or missing fields",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/webhook": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a paginated list of webhooks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook"
                ],
                "summary": "Get webhooks paginated",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional event filter",
                        "name": "event",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional HTTP method filter",
                        "name": "http_method",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "timeout",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional URL filter",
                        "name": "url",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of webhooks",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/webhook_entity.Webhook"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Edits a webhook based on its ID with updated URL, authorization, and event type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook"
                ],
                "summary": "Edit an existing webhook",
                "parameters": [
                    {
                        "description": "Updated webhook data",
                        "name": "webhook",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/webhook_model.UpdateWebhook"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Edited webhook",
                        "schema": {
                            "$ref": "#/definitions/webhook_entity.Webhook"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new webhook with the specified URL, authorization, and event type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook"
                ],
                "summary": "Create a new webhook",
                "parameters": [
                    {
                        "description": "Webhook data",
                        "name": "webhook",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/webhook_model.CreateWebhook"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created webhook",
                        "schema": {
                            "$ref": "#/definitions/webhook_entity.Webhook"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a webhook by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook"
                ],
                "summary": "Delete webhook by ID",
                "parameters": [
                    {
                        "description": "Webhook ID to delete",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/common_model.RequiredId"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Webhook deleted successfully"
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/webhook-in": {
            "get": {
                "description": "Used by meta to verify if it is a valid webhook endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook In"
                ],
                "summary": "Verify Webhook.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription mode, always set to 'subscribe'",
                        "name": "hub.mode",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "A challenge integer that must be returned to confirm the webhook",
                        "name": "hub.challenge",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "A string used for validation, defined in the Webhooks setup in the App Dashboard",
                        "name": "hub.verify_token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "hub.challenge returned as a string.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Executes the context handler then the change handlers. If any error is thrown this function will also throw an error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook In"
                ],
                "summary": "Handles Webhooks.",
                "parameters": [
                    {
                        "description": "Content sent by WhatsApp Cloud API.",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/webhook_model.WebhookBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Valid webhook endpoint."
                    }
                }
            }
        },
        "/webhook/content/{keyName}/like/{likeText}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Uses regex with the ~ operator to query text at the key.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook"
                ],
                "summary": "Queries webhook key like text paginated",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional event filter",
                        "name": "event",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional HTTP method filter",
                        "name": "http_method",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "timeout",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional URL filter",
                        "name": "url",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Text to apply like operator on the given key",
                        "name": "likeText",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The key to apply like operator",
                        "name": "keyName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of webhooks",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/webhook_entity.Webhook"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query or path parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/webhook/log": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a paginated list of webhook logs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Webhook log"
                ],
                "summary": "Get webhook logs paginated",
                "parameters": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "created_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "created_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "http_response_code",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The unique identifier",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset from where to start the items",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "x-enum-varnames": [
                            "Asc",
                            "Desc"
                        ],
                        "name": "updated_at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_geq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "updated_at_leq",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "webhook_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of webhook logs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/webhook_entity.WebhookLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/websocket/campaign/whatsapp/send/{campaignId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Upgrades to WebSocket to send a campaign and receive real-time status and results.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Campaign Websocket"
                ],
                "summary": "Send WhatsApp campaign via WebSocket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Campaign ID",
                        "name": "campaignId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Optional: customize message send behavior",
                        "name": "function",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "101": {
                        "description": "WebSocket connection established",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid campaign ID or bad request",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/websocket/message/new": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Upgrades the connection to WebSocket. Streams messages sent or received in real-time.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Message Websocket"
                ],
                "summary": "Watches for new messages",
                "responses": {
                    "101": {
                        "description": "WebSocket connection established",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid connection request",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/websocket/status/new": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "WebSocket route that allows the user to watch for incoming message status updates.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Status Websocket"
                ],
                "summary": "Watches for new statuses",
                "responses": {
                    "200": {
                        "description": "Status update received",
                        "schema": {
                            "$ref": "#/definitions/status_entity.Status"
                        }
                    },
                    "400": {
                        "description": "Invalid WebSocket handshake",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        },
        "/websocket/{messageChannel}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "All websocket routes with the \"websocket\" prefix are authenticated with this user middleware. messageChannel is the channel that the user wants to subscribe to.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Websocket"
                ],
                "summary": "Authenticates websocket handshake",
                "responses": {
                    "200": {
                        "description": "Authentication successful"
                    }
                }
            }
        },
        "/whatsapp-template": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a paginated list of templates for WhatsApp using graph API pagination.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WhatsApp template"
                ],
                "summary": "Get templates paginated",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Used to paginate.",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Used to paginate.",
                        "name": "before",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "content",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "name",
                                "components",
                                "language",
                                "status",
                                "category",
                                "id"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields to be returned.",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "language",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "name_or_content",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "total_count",
                                "message_template_count",
                                "message_template_limit",
                                "are_translations_complete"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Summary to be returned.",
                        "name": "summary",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of templates",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/template_model.GetTemplateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    },
                    "500": {
                        "description": "Unable to get templates from API",
                        "schema": {
                            "$ref": "#/definitions/common_model.DescriptiveError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth_model.TokenRequest": {
            "type": "object",
            "properties": {
                "grant_type": {
                    "description": "password | refresh_token",
                    "type": "string",
                    "example": "password"
                },
                "password": {
                    "type": "string",
                    "example": "123456"
                },
                "refresh_token": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "example": "user@mail.com"
                }
            }
        },
        "auth_model.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "JWT",
                    "type": "string",
                    "example": "eyJhbGciOi..."
                },
                "expires_in": {
                    "description": "seconds",
                    "type": "integer",
                    "example": 3600
                },
                "refresh_token": {
                    "description": "JWT",
                    "type": "string",
                    "example": "eyJhbGciOi..."
                },
                "token_type": {
                    "description": "Always \"bearer\"",
                    "type": "string",
                    "example": "bearer"
                }
            }
        },
        "campaign_entity.Campaign": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "messaging_product": {
                    "description": "Null if manager received the message.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/messaging_product_entity.MessagingProduct"
                        }
                    ]
                },
                "messaging_product_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "campaign_entity.CampaignMessage": {
            "type": "object",
            "properties": {
                "campaign": {
                    "$ref": "#/definitions/campaign_entity.Campaign"
                },
                "campaign_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message": {
                    "$ref": "#/definitions/message_entity.Message"
                },
                "message_id": {
                    "type": "string"
                },
                "sender_data": {
                    "description": "Specific data that allows to send message.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_model.SenderData"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "campaign_entity.CampaignMessageSendError": {
            "type": "object",
            "properties": {
                "campaign_message": {
                    "$ref": "#/definitions/campaign_entity.CampaignMessage"
                },
                "campaign_message_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "error_data": {
                    "description": "Error message.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "campaign_model.CreateCampaign": {
            "type": "object",
            "required": [
                "messaging_product_id"
            ],
            "properties": {
                "messaging_product_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "campaign_model.CreateCampaignMessage": {
            "type": "object",
            "properties": {
                "campaign_id": {
                    "type": "string"
                },
                "sender_data": {
                    "description": "Specific data that allows to send message.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_model.SenderData"
                        }
                    ]
                }
            }
        },
        "campaign_model.UpdateCampaign": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier.",
                    "type": "string"
                },
                "messaging_product_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "common_model.BusinessAccount": {
            "type": "string",
            "enum": [
                "whatsapp_business_account"
            ],
            "x-enum-varnames": [
                "WhatsAppBusinessAccount"
            ]
        },
        "common_model.DescriptiveError": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Additional information about the error provided by the service that generated it. E. g. if an ORM returns an error, it will be propagated here as the raw error."
                },
                "message": {
                    "description": "Short text describing the error as best as we can for humans.",
                    "type": "string"
                }
            }
        },
        "common_model.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error codes (not HTPP codes) described at https://developers.facebook.com/docs/whatsapp/cloud-api/support/error-codes/",
                    "type": "integer"
                },
                "error_data": {
                    "$ref": "#/definitions/common_model.ErrorData"
                },
                "fbtrace_id": {
                    "description": "Unique identifier for the error. Use this ID when contacting support.",
                    "type": "string"
                },
                "message": {
                    "description": "A combination of the error code and title.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of error. Example: OAuthException",
                    "type": "string"
                }
            }
        },
        "common_model.ErrorData": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Describes the error and provides most probable reason. Might contain information about how to solve the error. Example: Message failed to send because there were too many messages sent from this phone number in a short period of time.",
                    "type": "string"
                },
                "messaging_product": {
                    "description": "Default is \"whatsapp\".",
                    "type": "string"
                }
            }
        },
        "common_model.GraphCursors": {
            "type": "object",
            "properties": {
                "after": {
                    "description": "Used to paginate.",
                    "type": "string"
                },
                "before": {
                    "description": "Used to paginate.",
                    "type": "string"
                }
            }
        },
        "common_model.Id": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "common_model.Language": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Language and locale code. E. g. pt_BR.",
                    "type": "string"
                }
            }
        },
        "common_model.Pricing": {
            "type": "object",
            "properties": {
                "billable": {
                    "type": "boolean"
                },
                "category": {
                    "$ref": "#/definitions/common_model.PricingCategory"
                },
                "pricing_model": {
                    "type": "string"
                }
            }
        },
        "common_model.PricingCategory": {
            "type": "string",
            "enum": [
                "authentication",
                "marketing",
                "utility",
                "service",
                "referral_conversation"
            ],
            "x-enum-comments": {
                "Authentication": "Indicates the conversation was opened by a business sending template categorized as AUTHENTICATION to the customer. This applies any time it has been more than 24 hours since the last customer message.",
                "Marketing": "Indicates the conversation was opened by a business sending template categorized as MARKETING to the customer. This applies any time it has been more than 24 hours since the last customer message.",
                "ReferralConversation": "Indicates a free entry point conversation.",
                "Service": "Indicates that the conversation opened by a business replying to a customer within a customer service window.",
                "Utility": "Indicates the conversation was opened by a business sending template categorized as UTILITY to the customer. This applies any time it has been more than 24 hours since the last customer message."
            },
            "x-enum-varnames": [
                "Authentication",
                "Marketing",
                "Utility",
                "Service",
                "ReferralConversation"
            ]
        },
        "common_model.RequiredId": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The unique identifier.",
                    "type": "string"
                }
            }
        },
        "common_model.SuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "contact_entity.Contact": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "photo_path": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "contact_model.CreateContact": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "photo_path": {
                    "type": "string"
                }
            }
        },
        "contact_model.UpdateContact": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier.",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "photo_path": {
                    "type": "string"
                }
            }
        },
        "database_model.DateOrderEnum": {
            "type": "string",
            "enum": [
                "asc",
                "desc"
            ],
            "x-enum-varnames": [
                "Asc",
                "Desc"
            ]
        },
        "fiber.Map": {
            "type": "object",
            "additionalProperties": true
        },
        "media_model.MediaInfo": {
            "type": "object",
            "properties": {
                "file_size": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "messaging_product": {
                    "type": "string"
                },
                "mime_type": {
                    "type": "string"
                },
                "sha256": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "media_model.UseMedia": {
            "type": "object",
            "properties": {
                "caption": {
                    "description": "Optional and not used for audio or sticker media.",
                    "type": "string"
                },
                "filename": {
                    "description": "Optional and used for document media.",
                    "type": "string"
                },
                "id": {
                    "description": "To use id your media should be in the meta server. You can upload an media to the meta server with https://developers.facebook.com/docs/whatsapp/cloud-api/reference/media#upload-media.",
                    "type": "string"
                },
                "link": {
                    "description": "To use link your media should be in a publicly available server.",
                    "type": "string"
                }
            }
        },
        "message_content_type_model.Contact": {
            "type": "object",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_type_contact_model.Address"
                    }
                },
                "birthday": {
                    "type": "string"
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_type_contact_model.Email"
                    }
                },
                "name": {
                    "$ref": "#/definitions/message_type_contact_model.Name"
                },
                "org": {
                    "$ref": "#/definitions/message_type_contact_model.Org"
                },
                "phones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_type_contact_model.Phone"
                    }
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_type_contact_model.URL"
                    }
                }
            }
        },
        "message_content_type_model.Interactive": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "An action object with what you want the user to perform after reading the message. See action object for full information.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_type_interactive_model.Action"
                        }
                    ]
                },
                "body": {
                    "description": "Optional for type product. Required for other message types.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_type_interactive_model.Body"
                        }
                    ]
                },
                "footer": {
                    "description": "An object with the footer of the message.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_type_interactive_model.Footer"
                        }
                    ]
                },
                "header": {
                    "description": "Header content displayed on top of a message. You cannot set a header if your interactive object is of product type.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_type_interactive_model.Header"
                        }
                    ]
                },
                "type": {
                    "description": "The type of interactive message you want to send.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_type_interactive_model.InteractiveType"
                        }
                    ]
                }
            }
        },
        "message_content_type_model.ReceivedInteractive": {
            "type": "object",
            "properties": {
                "button_reply": {
                    "$ref": "#/definitions/message_type_interactive_model.ButtonReplyData"
                },
                "list_reply": {
                    "$ref": "#/definitions/message_type_interactive_model.ListReplyData"
                },
                "type": {
                    "description": "The type of interactive message received.",
                    "type": "string"
                }
            }
        },
        "message_entity.Message": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "from": {
                    "description": "Null if manager sent the message.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/messaging_product_entity.MessagingProductContact"
                        }
                    ]
                },
                "from_id": {
                    "description": "Null if manager sent the message.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "messaging_product": {
                    "description": "Null if manager received the message.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/messaging_product_entity.MessagingProduct"
                        }
                    ]
                },
                "messaging_product_id": {
                    "type": "string"
                },
                "product_data": {
                    "description": "Specific data about the product. For example, the webhook data received.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_model.ProductData"
                        }
                    ]
                },
                "receiver_data": {
                    "description": "Specific data about the product. For example, the webhook data received.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_model.ReceiverData"
                        }
                    ]
                },
                "sender_data": {
                    "description": "Specific data that allows to send message.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_model.SenderData"
                        }
                    ]
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/status_model.StatusFields"
                    }
                },
                "to": {
                    "description": "Null if manager received the message.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/messaging_product_entity.MessagingProductContact"
                        }
                    ]
                },
                "to_id": {
                    "description": "Null if manager received the message.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "message_model.Context": {
            "type": "object",
            "properties": {
                "message_id": {
                    "description": "Id of the message you want to answer.",
                    "type": "string"
                }
            }
        },
        "message_model.Message": {
            "type": "object",
            "properties": {
                "audio": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "biz_opaque_callback_data": {
                    "description": "Arbitrary string used for tracking messages, groups of messages, you name it...",
                    "type": "string"
                },
                "button": {
                    "$ref": "#/definitions/message_type_common_model.ButtonData"
                },
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_content_type_model.Contact"
                    }
                },
                "context": {
                    "description": "Used to answer a message.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_model.Context"
                        }
                    ]
                },
                "document": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "image": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "interactive": {
                    "$ref": "#/definitions/message_content_type_model.Interactive"
                },
                "location": {
                    "$ref": "#/definitions/message_type_common_model.LocationData"
                },
                "messaging_product": {
                    "description": "Default is \"whatsapp\".",
                    "type": "string"
                },
                "order": {
                    "$ref": "#/definitions/message_type_common_model.OrderData"
                },
                "reaction": {
                    "$ref": "#/definitions/message_type_common_model.ReactionData"
                },
                "recipient_identity_key_hash": {
                    "description": "To use it you need to allow identity check at code.service. If the field is provided, this message will only be sent if \"recipient_identity_key_hash\" matches client's current hash.",
                    "type": "string"
                },
                "recipient_type": {
                    "description": "Default is \"individual\"",
                    "type": "string"
                },
                "sticker": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "template": {
                    "$ref": "#/definitions/template_model.UseTemplate"
                },
                "text": {
                    "$ref": "#/definitions/message_type_common_model.TextData"
                },
                "to": {
                    "description": "Whatsapp ID of receiver.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of message.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_type_common_model.Type"
                        }
                    ]
                },
                "video": {
                    "$ref": "#/definitions/media_model.UseMedia"
                }
            }
        },
        "message_model.MessageReceived": {
            "type": "object",
            "properties": {
                "audio": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "button": {
                    "$ref": "#/definitions/message_type_common_model.ButtonData"
                },
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_content_type_model.Contact"
                    }
                },
                "context": {
                    "$ref": "#/definitions/message_model.ReceivedContext"
                },
                "document": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common_model.Error"
                    }
                },
                "from": {
                    "description": "The customer's WhatsApp ID. A business can respond to a customer using this ID. This ID may not match the customer's phone number, which is returned by the API as input when sending a message to the customer.",
                    "type": "string"
                },
                "id": {
                    "description": "The ID for the message that was received by the business. You could use messages endpoint to mark this specific message as read.",
                    "type": "string"
                },
                "image": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "interactive": {
                    "$ref": "#/definitions/message_content_type_model.ReceivedInteractive"
                },
                "location": {
                    "$ref": "#/definitions/message_type_common_model.LocationData"
                },
                "order": {
                    "$ref": "#/definitions/message_type_common_model.OrderData"
                },
                "reaction": {
                    "$ref": "#/definitions/message_type_common_model.ReactionData"
                },
                "referral": {
                    "$ref": "#/definitions/message_model.Referral"
                },
                "sticker": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "system": {
                    "$ref": "#/definitions/message_model.System"
                },
                "template": {
                    "$ref": "#/definitions/template_model.UseTemplate"
                },
                "text": {
                    "$ref": "#/definitions/message_type_common_model.TextData"
                },
                "timestamp": {
                    "description": "Unix timestamp indicating when the WhatsApp server received the message from the customer.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/message_type_common_model.ReceiveType"
                },
                "video": {
                    "$ref": "#/definitions/media_model.UseMedia"
                }
            }
        },
        "message_model.MessageResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "message_status": {
                    "type": "string"
                }
            }
        },
        "message_model.ProductData": {
            "type": "object",
            "properties": {
                "contacts": {
                    "description": "Contacts that received messages.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_model.ResponseContact"
                    }
                },
                "messages": {
                    "description": "Ids of sent messages.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_model.MessageResponse"
                    }
                },
                "messaging_product": {
                    "description": "Default is \"whatsapp\".",
                    "type": "string"
                }
            }
        },
        "message_model.ReceivedContext": {
            "type": "object",
            "properties": {
                "forwarded": {
                    "description": "Set to true if the message received by the business has been forwarded.",
                    "type": "boolean"
                },
                "frequently_forwarded": {
                    "description": "Set to true if the message received by the business has been forwarded more than 5 times.",
                    "type": "boolean"
                },
                "from": {
                    "description": "The WhatsApp ID for the customer who replied to an inbound message.",
                    "type": "string"
                },
                "id": {
                    "description": "The message ID for the sent message for an inbound reply.",
                    "type": "string"
                },
                "referred_product": {
                    "description": "Referred product object describing the product the user is requesting information about. You must parse this value if you support Product Enquiry Messages.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_model.ReferredProduct"
                        }
                    ]
                }
            }
        },
        "message_model.ReceiverData": {
            "type": "object",
            "properties": {
                "audio": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "button": {
                    "$ref": "#/definitions/message_type_common_model.ButtonData"
                },
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_content_type_model.Contact"
                    }
                },
                "context": {
                    "$ref": "#/definitions/message_model.ReceivedContext"
                },
                "document": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common_model.Error"
                    }
                },
                "from": {
                    "description": "The customer's WhatsApp ID. A business can respond to a customer using this ID. This ID may not match the customer's phone number, which is returned by the API as input when sending a message to the customer.",
                    "type": "string"
                },
                "id": {
                    "description": "The ID for the message that was received by the business. You could use messages endpoint to mark this specific message as read.",
                    "type": "string"
                },
                "image": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "interactive": {
                    "$ref": "#/definitions/message_content_type_model.ReceivedInteractive"
                },
                "location": {
                    "$ref": "#/definitions/message_type_common_model.LocationData"
                },
                "order": {
                    "$ref": "#/definitions/message_type_common_model.OrderData"
                },
                "reaction": {
                    "$ref": "#/definitions/message_type_common_model.ReactionData"
                },
                "referral": {
                    "$ref": "#/definitions/message_model.Referral"
                },
                "sticker": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "system": {
                    "$ref": "#/definitions/message_model.System"
                },
                "template": {
                    "$ref": "#/definitions/template_model.UseTemplate"
                },
                "text": {
                    "$ref": "#/definitions/message_type_common_model.TextData"
                },
                "timestamp": {
                    "description": "Unix timestamp indicating when the WhatsApp server received the message from the customer.",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/message_type_common_model.ReceiveType"
                },
                "video": {
                    "$ref": "#/definitions/media_model.UseMedia"
                }
            }
        },
        "message_model.Referral": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "Body for the ad or post.",
                    "type": "string"
                },
                "ctwa_clid": {
                    "description": "Click ID generated by Meta for ads that click to WhatsApp.",
                    "type": "string"
                },
                "headline": {
                    "description": "Headline used in the ad or post.",
                    "type": "string"
                },
                "image_url": {
                    "description": "URL of the image, when media_type is an image.",
                    "type": "string"
                },
                "media_type": {
                    "description": "Media present in the ad or post; image or video.",
                    "type": "string"
                },
                "source_id": {
                    "description": "Meta ID for an ad or a post.",
                    "type": "string"
                },
                "source_type": {
                    "description": "The type of the ad’s source; ad or post.",
                    "type": "string"
                },
                "source_url": {
                    "description": "The Meta URL that leads to the ad or post clicked by the customer. Opening this url takes you to the ad viewed by your customer.",
                    "type": "string"
                },
                "thumbnail_url": {
                    "description": "URL for the thumbnail, when media_type is a video.",
                    "type": "string"
                },
                "video_url": {
                    "description": "URL of the video, when media_type is a video.",
                    "type": "string"
                }
            }
        },
        "message_model.ReferredProduct": {
            "type": "object",
            "properties": {
                "catalog_id": {
                    "description": "Unique identifier of the Meta catalog linked to the WhatsApp Business Account.",
                    "type": "string"
                },
                "product_retailer_id": {
                    "description": "Unique identifier of the product in a catalog.",
                    "type": "string"
                }
            }
        },
        "message_model.ResponseContact": {
            "type": "object",
            "properties": {
                "input": {
                    "description": "User's phone number.",
                    "type": "string"
                },
                "wa_id": {
                    "description": "User's WhatsApp id returned.",
                    "type": "string"
                }
            }
        },
        "message_model.SendWhatsAppMessage": {
            "type": "object",
            "properties": {
                "sender_data": {
                    "description": "Specific data that allows to send message.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_model.Message"
                        }
                    ]
                },
                "to_id": {
                    "description": "Messaging product contact id to send message.",
                    "type": "string"
                }
            }
        },
        "message_model.SenderData": {
            "type": "object",
            "properties": {
                "audio": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "biz_opaque_callback_data": {
                    "description": "Arbitrary string used for tracking messages, groups of messages, you name it...",
                    "type": "string"
                },
                "button": {
                    "$ref": "#/definitions/message_type_common_model.ButtonData"
                },
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_content_type_model.Contact"
                    }
                },
                "context": {
                    "description": "Used to answer a message.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_model.Context"
                        }
                    ]
                },
                "document": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "image": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "interactive": {
                    "$ref": "#/definitions/message_content_type_model.Interactive"
                },
                "location": {
                    "$ref": "#/definitions/message_type_common_model.LocationData"
                },
                "messaging_product": {
                    "description": "Default is \"whatsapp\".",
                    "type": "string"
                },
                "order": {
                    "$ref": "#/definitions/message_type_common_model.OrderData"
                },
                "reaction": {
                    "$ref": "#/definitions/message_type_common_model.ReactionData"
                },
                "recipient_identity_key_hash": {
                    "description": "To use it you need to allow identity check at code.service. If the field is provided, this message will only be sent if \"recipient_identity_key_hash\" matches client's current hash.",
                    "type": "string"
                },
                "recipient_type": {
                    "description": "Default is \"individual\"",
                    "type": "string"
                },
                "sticker": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "template": {
                    "$ref": "#/definitions/template_model.UseTemplate"
                },
                "text": {
                    "$ref": "#/definitions/message_type_common_model.TextData"
                },
                "to": {
                    "description": "Whatsapp ID of receiver.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of message.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_type_common_model.Type"
                        }
                    ]
                },
                "video": {
                    "$ref": "#/definitions/media_model.UseMedia"
                }
            }
        },
        "message_model.SendingStatus": {
            "type": "string",
            "enum": [
                "delivered",
                "read",
                "sent",
                "failed"
            ],
            "x-enum-varnames": [
                "Delivered",
                "Read",
                "Sent",
                "Failed"
            ]
        },
        "message_model.System": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "Describes the change to the customer's identity or phone number.",
                    "type": "string"
                },
                "customer": {
                    "description": "The WhatsApp ID for the customer prior to the update.",
                    "type": "string"
                },
                "identity": {
                    "description": "Hash for the identity fetched from server.",
                    "type": "string"
                },
                "new_wa_id": {
                    "description": "New WhatsApp ID for the customer when their phone number is updated. Available on webhook versions v11.0 and earlier.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of system update.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_model.SystemType"
                        }
                    ]
                },
                "wa_id": {
                    "description": "New WhatsApp ID for the customer when their phone number is updated. Available on webhook versions v12.0 and later.",
                    "type": "string"
                }
            }
        },
        "message_model.SystemType": {
            "type": "object",
            "properties": {
                "customer_changed_number": {
                    "description": "A customer changed their phone number.",
                    "type": "string"
                },
                "customer_identity_changed": {
                    "description": "A customer changed their profile information.",
                    "type": "string"
                }
            }
        },
        "message_type_common_model.ButtonData": {
            "type": "object",
            "properties": {
                "payload": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "message_type_common_model.ButtonSubType": {
            "type": "string",
            "enum": [
                "quick_reply",
                "call_to_action"
            ],
            "x-enum-varnames": [
                "QuickReply",
                "CallToAction"
            ]
        },
        "message_type_common_model.Currency": {
            "type": "object",
            "properties": {
                "amount_1000": {
                    "description": "Value times 1000.",
                    "type": "integer"
                },
                "code": {
                    "description": "Use ISO 4217.",
                    "type": "string"
                },
                "fallback_value": {
                    "description": "Text in case it fails.",
                    "type": "string"
                }
            }
        },
        "message_type_common_model.DateTime": {
            "type": "object",
            "properties": {
                "fallback_value": {
                    "type": "string"
                }
            }
        },
        "message_type_common_model.LocationData": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "message_type_common_model.OrderData": {
            "type": "object",
            "properties": {
                "catalog_id": {
                    "description": "ID for the catalog the ordered item belongs to.",
                    "type": "string"
                },
                "product_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_type_common_model.ProductItem"
                    }
                },
                "text": {
                    "description": "Text message from the user sent along with the order.",
                    "type": "string"
                }
            }
        },
        "message_type_common_model.ProductItem": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string"
                },
                "item_price": {
                    "type": "string"
                },
                "product_retailer_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "string"
                }
            }
        },
        "message_type_common_model.ReactionData": {
            "type": "object",
            "properties": {
                "emoji": {
                    "description": "The emoji encoding. Something like \"\\uD83D\\uDE00\"",
                    "type": "string"
                },
                "message_id": {
                    "description": "Id of the message to react to. Something like \"wamid.HBgLM...\"",
                    "type": "string"
                }
            }
        },
        "message_type_common_model.ReceiveType": {
            "type": "string",
            "enum": [
                "system",
                "unknown",
                "text",
                "reaction",
                "location",
                "contacts",
                "interactive",
                "template",
                "image",
                "video",
                "audio",
                "sticker",
                "document",
                "button",
                "order",
                "document",
                "image",
                "video",
                "text"
            ],
            "x-enum-varnames": [
                "Document",
                "Image",
                "Video",
                "Text"
            ]
        },
        "message_type_common_model.TextData": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "preview_url": {
                    "type": "boolean"
                }
            }
        },
        "message_type_common_model.Type": {
            "type": "string",
            "enum": [
                "system",
                "unknown",
                "text",
                "reaction",
                "location",
                "contacts",
                "interactive",
                "template",
                "image",
                "video",
                "audio",
                "sticker",
                "document",
                "button",
                "order"
            ],
            "x-enum-varnames": [
                "Document",
                "Image",
                "Video",
                "Text"
            ]
        },
        "message_type_contact_model.Address": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "country_code": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "zip": {
                    "type": "string"
                }
            }
        },
        "message_type_contact_model.Email": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "message_type_contact_model.Name": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "formatted_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "middle_name": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "suffix": {
                    "type": "string"
                }
            }
        },
        "message_type_contact_model.Org": {
            "type": "object",
            "properties": {
                "company": {
                    "type": "string"
                },
                "department": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "message_type_contact_model.Phone": {
            "type": "object",
            "properties": {
                "phone": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "wa_id": {
                    "type": "string"
                }
            }
        },
        "message_type_contact_model.URL": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "message_type_interactive_model.Action": {
            "type": "object",
            "properties": {
                "button": {
                    "description": "Required for list messages. It cannot be an empty string and must be unique within the message. Emojis are supported, markdown is not. Maximum length: 20 characters.",
                    "type": "string"
                },
                "buttons": {
                    "description": "Required for Reply Button Messages.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_type_interactive_model.ButtonData"
                    }
                },
                "catalog_id": {
                    "description": "Required for Single-Product Messages and Multi-Product Messages. Unique identifier of the Facebook catalog linked to your WhatsApp Business Account. This ID can be retrieved via Commerce Manager.",
                    "type": "string"
                },
                "flow_action": {
                    "description": "Optional for Flows Messages. navigate or data_exchange. Use navigate to predefine the first screen as part of the message. Use data_exchange for advanced use-cases where the first screen is provided by your endpoint.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_type_interactive_model.FlowAction"
                        }
                    ]
                },
                "flow_action_payload": {
                    "description": "Optional for Flows Messages. Required only if flow_action is navigate.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_type_interactive_model.FlowActionPayload"
                        }
                    ]
                },
                "flow_cta": {
                    "description": "Required for Flows Messages. Text on the CTA button, eg. \"Signup\". Maximum length: 20 characters (no emoji).",
                    "type": "string"
                },
                "flow_id": {
                    "description": "Required for Flows Messages. Unique identifier of the Flow provided by WhatsApp.",
                    "type": "string"
                },
                "flow_message_version": {
                    "description": "Required for Flows Messages.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_type_interactive_model.FlowMessageVersion"
                        }
                    ]
                },
                "flow_mode": {
                    "description": "Optional for Flows Messages. The current mode of the Flow, either draft or published.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_type_interactive_model.FlowMode"
                        }
                    ]
                },
                "flow_token": {
                    "description": "Required for Flows Messages. A token that is generated by the business to serve as an identifier.",
                    "type": "string"
                },
                "product_retailer_id": {
                    "description": "Required for Single-Product Messages and Multi-Product Messages. Unique identifier of the product in a catalog. Maximum 100 characters for both Single-Product and Multi-Product messages. To get this ID, go to Commerce Manager, select your Facebook Business account, and you will see a list of shops connected to your account. Click the shop you want to use. On the left-side panel, click Catalog \u003e Items, and find the item you want to mention. The ID for that item is displayed under the item's name.",
                    "type": "string"
                },
                "sections": {
                    "description": "Required for List Messages and Multi-Product Messages. There is a minimum of 1 and maximum of 10.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_type_interactive_model.Section"
                    }
                }
            }
        },
        "message_type_interactive_model.Body": {
            "type": "object",
            "properties": {
                "text": {
                    "description": "Required if body is present",
                    "type": "string"
                }
            }
        },
        "message_type_interactive_model.ButtonData": {
            "type": "object",
            "properties": {
                "reply": {
                    "description": "The reply object contains the title and ID of the reply button.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_type_interactive_model.ButtonReplyData"
                        }
                    ]
                },
                "type": {
                    "description": "The only supported option is reply for Reply Button Messages.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_type_interactive_model.ButtonType"
                        }
                    ]
                }
            }
        },
        "message_type_interactive_model.ButtonReplyData": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "A unique identifier for the button reply.",
                    "type": "string"
                },
                "title": {
                    "description": "The title of the button reply.",
                    "type": "string"
                }
            }
        },
        "message_type_interactive_model.ButtonType": {
            "type": "string",
            "enum": [
                "reply"
            ],
            "x-enum-varnames": [
                "Reply"
            ]
        },
        "message_type_interactive_model.FlowAction": {
            "type": "string",
            "enum": [
                "navigate",
                "data_exchange"
            ],
            "x-enum-varnames": [
                "Navigate",
                "DataExchange"
            ]
        },
        "message_type_interactive_model.FlowActionPayload": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Optional. The input data for the first screen of the Flow. Must be a non-empty object."
                },
                "screen": {
                    "description": "Required. The id of the first screen of the Flow.",
                    "type": "string"
                }
            }
        },
        "message_type_interactive_model.FlowMessageVersion": {
            "type": "string",
            "enum": [
                "3"
            ],
            "x-enum-varnames": [
                "Version3"
            ]
        },
        "message_type_interactive_model.FlowMode": {
            "type": "string",
            "enum": [
                "draft",
                "published"
            ],
            "x-enum-varnames": [
                "Draft",
                "Published"
            ]
        },
        "message_type_interactive_model.Footer": {
            "type": "object",
            "properties": {
                "text": {
                    "description": "Required if body is present",
                    "type": "string"
                }
            }
        },
        "message_type_interactive_model.Header": {
            "type": "object",
            "properties": {
                "audio": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "document": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "image": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of message.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_type_interactive_model.HeaderType"
                        }
                    ]
                },
                "video": {
                    "$ref": "#/definitions/media_model.UseMedia"
                }
            }
        },
        "message_type_interactive_model.HeaderType": {
            "type": "string",
            "enum": [
                "system",
                "unknown",
                "text",
                "reaction",
                "location",
                "contacts",
                "interactive",
                "template",
                "image",
                "video",
                "audio",
                "sticker",
                "document",
                "button",
                "order",
                "document",
                "image",
                "video",
                "text"
            ],
            "x-enum-varnames": [
                "Document",
                "Image",
                "Video",
                "Text"
            ]
        },
        "message_type_interactive_model.InteractiveType": {
            "type": "string",
            "enum": [
                "list",
                "button",
                "product",
                "product_list",
                "catalog_message",
                "flow"
            ],
            "x-enum-varnames": [
                "List",
                "Button",
                "Product",
                "ProductList",
                "CatalogMessage",
                "Flow"
            ]
        },
        "message_type_interactive_model.ListReplyData": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "The description of the list reply.",
                    "type": "string"
                },
                "id": {
                    "description": "A unique identifier for the list reply.",
                    "type": "string"
                },
                "title": {
                    "description": "The title of the list reply.",
                    "type": "string"
                }
            }
        },
        "message_type_interactive_model.ProductItem": {
            "type": "object",
            "properties": {
                "product_retailer_id": {
                    "description": "Required for Multi-Product Messages. Unique identifier of the product in a catalog. To get this ID, go to Commerce Manager, select your account and the shop you want to use. Then, click Catalog \u003e Items, and find the item you want to mention. The ID for that item is displayed under the item's name.",
                    "type": "string"
                }
            }
        },
        "message_type_interactive_model.Row": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Optional. Maximum length: 72 characters.",
                    "type": "string"
                },
                "id": {
                    "description": "Required. Maximum length: 200 characters.",
                    "type": "string"
                },
                "title": {
                    "description": "Required. Maximum length: 24 characters.",
                    "type": "string"
                }
            }
        },
        "message_type_interactive_model.Section": {
            "type": "object",
            "properties": {
                "product_items": {
                    "description": "Required for Multi-Product Messages. There is a minimum of 1 product per section and a maximum of 30 products across all sections.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_type_interactive_model.ProductItem"
                    }
                },
                "rows": {
                    "description": "Required for List Messages. Contains a list of row objects. Limited to 10 rows across all sections.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_type_interactive_model.Row"
                    }
                },
                "title": {
                    "description": "Required if the message has more than one section. Maximum length: 24 characters.",
                    "type": "string"
                }
            }
        },
        "messaging_product_entity.MessagingProduct": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "Add type:enum('WhatsApp'); when it becomes supported by GORM and PostgreSQL",
                    "enum": [
                        "WhatsApp"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/messaging_product_model.MessagingProductName"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "messaging_product_entity.MessagingProductContact": {
            "type": "object",
            "properties": {
                "blocked": {
                    "type": "boolean"
                },
                "contact": {
                    "$ref": "#/definitions/contact_entity.Contact"
                },
                "contact_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_read_at": {
                    "description": "Timestamp of the last read action.",
                    "type": "string"
                },
                "messaging_product": {
                    "$ref": "#/definitions/messaging_product_entity.MessagingProduct"
                },
                "messaging_product_id": {
                    "type": "string"
                },
                "product_details": {
                    "$ref": "#/definitions/messaging_product_model.ProductDetails"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "messaging_product_model.CreateContact": {
            "type": "object",
            "properties": {
                "contact_id": {
                    "type": "string"
                },
                "messaging_product_id": {
                    "type": "string"
                },
                "product_details": {
                    "$ref": "#/definitions/messaging_product_model.ProductDetails"
                }
            }
        },
        "messaging_product_model.CreateWhatsAppContact": {
            "type": "object",
            "properties": {
                "contact_id": {
                    "type": "string"
                },
                "product_details": {
                    "$ref": "#/definitions/messaging_product_model.WhatsAppProductDetails"
                }
            }
        },
        "messaging_product_model.MessagingProductName": {
            "type": "string",
            "enum": [
                "WhatsApp"
            ],
            "x-enum-varnames": [
                "WhatsApp"
            ]
        },
        "messaging_product_model.ProductDetails": {
            "type": "object",
            "properties": {
                "phone_number": {
                    "description": "Available at from field on received messages.",
                    "type": "string"
                },
                "wa_id": {
                    "description": "Available at from field on received messages.",
                    "type": "string"
                }
            }
        },
        "messaging_product_model.WhatsAppProductDetails": {
            "type": "object",
            "properties": {
                "phone_number": {
                    "description": "Available at from field on received messages.",
                    "type": "string"
                },
                "wa_id": {
                    "description": "Available at from field on received messages.",
                    "type": "string"
                }
            }
        },
        "status_entity.Status": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "json": {
                    "$ref": "#/definitions/message_entity.Message"
                },
                "message_id": {
                    "type": "string"
                },
                "product_data": {
                    "description": "Specific data about the product. For example, the webhook data received.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/status_model.ProductData"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "status_model.ProductData": {
            "type": "object",
            "properties": {
                "biz_opaque_callback_data": {
                    "description": "Arbitrary string used for tracking messages, groups of messages, you name it...",
                    "type": "string"
                },
                "conversation": {
                    "description": "Information about the conversation.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/webhook_model.Conversation"
                        }
                    ]
                },
                "errors": {
                    "description": "An array of error objects describing the error. Error objects have the following properties, which map to their equivalent properties in API error response payloads.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common_model.Error"
                    }
                },
                "id": {
                    "description": "The ID for the message that the business that is subscribed to the webhooks sent to a customer",
                    "type": "string"
                },
                "pricing": {
                    "description": "An object containing pricing information.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/common_model.Pricing"
                        }
                    ]
                },
                "recipient_id": {
                    "description": "The customer's WhatsApp ID. A business can respond to a customer using this ID. This ID may not match the customer's phone number, which is returned by the API as input when sending a message to the customer.",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/message_model.SendingStatus"
                },
                "timestamp": {
                    "description": "Date for the status message",
                    "type": "string"
                }
            }
        },
        "status_model.StatusFields": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "message_id": {
                    "type": "string"
                },
                "product_data": {
                    "description": "Specific data about the product. For example, the webhook data received.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/status_model.ProductData"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "template_model.ButtonData": {
            "type": "object",
            "properties": {
                "example": {
                    "description": "string or string array"
                },
                "flow_action": {
                    "type": "string"
                },
                "flow_id": {
                    "type": "string"
                },
                "navigate_screen": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/template_model.ButtonType"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "template_model.ButtonType": {
            "type": "string",
            "enum": [
                "PHONE_NUMBER",
                "URL",
                "QUICK_REPLY",
                "COPY_CODE",
                "FLOW"
            ],
            "x-enum-varnames": [
                "PhoneNumber",
                "Url",
                "QuickReply",
                "CopyCode",
                "Flow"
            ]
        },
        "template_model.Component": {
            "type": "object",
            "properties": {
                "index": {
                    "description": "Only for button type. This is actually an integer string.",
                    "type": "string"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/template_model.Parameter"
                    }
                },
                "sub_type": {
                    "description": "Only for button type.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/message_type_common_model.ButtonSubType"
                        }
                    ]
                },
                "type": {
                    "$ref": "#/definitions/template_model.ComponentType"
                }
            }
        },
        "template_model.ComponentExample": {
            "type": "object",
            "properties": {
                "body_text": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "header_handle": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "header_text": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "template_model.ComponentFormat": {
            "type": "string",
            "enum": [
                "IMAGE",
                "VIDEO",
                "STICKER",
                "DOCUMENT",
                "AUDIO",
                "TEXT"
            ],
            "x-enum-varnames": [
                "ImageFormat",
                "VideoFormat",
                "StickerFormat",
                "DocumentFormat",
                "AudioFormat",
                "TextFormat"
            ]
        },
        "template_model.ComponentType": {
            "type": "string",
            "enum": [
                "HEADER",
                "BODY",
                "FOOTER",
                "BUTTONS"
            ],
            "x-enum-varnames": [
                "Header",
                "Body",
                "Footer",
                "Buttons"
            ]
        },
        "template_model.GetTemplateResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/template_model.Template"
                    }
                },
                "paging": {
                    "$ref": "#/definitions/template_model.Paging"
                },
                "summary": {
                    "$ref": "#/definitions/template_model.TemplateSummaryResponse"
                }
            }
        },
        "template_model.Paging": {
            "type": "object",
            "properties": {
                "cursors": {
                    "$ref": "#/definitions/common_model.GraphCursors"
                },
                "next": {
                    "type": "string"
                }
            }
        },
        "template_model.Parameter": {
            "type": "object",
            "properties": {
                "audio": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "button": {
                    "$ref": "#/definitions/message_type_common_model.ButtonData"
                },
                "currency": {
                    "$ref": "#/definitions/message_type_common_model.Currency"
                },
                "date_time": {
                    "$ref": "#/definitions/message_type_common_model.DateTime"
                },
                "document": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "image": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "sticker": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/template_model.ParameterType"
                },
                "video": {
                    "$ref": "#/definitions/media_model.UseMedia"
                }
            }
        },
        "template_model.ParameterType": {
            "type": "string",
            "enum": [
                "text",
                "currency",
                "date_time",
                "image",
                "video",
                "sticker",
                "document",
                "button",
                "payload"
            ],
            "x-enum-varnames": [
                "Text",
                "Currency",
                "DateTime",
                "Image",
                "Video",
                "Sticker",
                "Document",
                "Button",
                "Payload"
            ]
        },
        "template_model.Template": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "components": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/template_model.TemplateComponent"
                    }
                },
                "id": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "template_model.TemplateComponent": {
            "type": "object",
            "properties": {
                "audio": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "buttons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/template_model.ButtonData"
                    }
                },
                "currency": {
                    "$ref": "#/definitions/message_type_common_model.Currency"
                },
                "date_time": {
                    "$ref": "#/definitions/message_type_common_model.DateTime"
                },
                "document": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "example": {
                    "$ref": "#/definitions/template_model.ComponentExample"
                },
                "format": {
                    "$ref": "#/definitions/template_model.ComponentFormat"
                },
                "image": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "sticker": {
                    "$ref": "#/definitions/media_model.UseMedia"
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/template_model.ComponentType"
                },
                "video": {
                    "$ref": "#/definitions/media_model.UseMedia"
                }
            }
        },
        "template_model.TemplateFields": {
            "type": "string",
            "enum": [
                "name",
                "components",
                "language",
                "status",
                "category",
                "id"
            ],
            "x-enum-varnames": [
                "Name",
                "Components",
                "Language",
                "TemplateStatus",
                "Category",
                "Id"
            ]
        },
        "template_model.TemplateSummary": {
            "type": "string",
            "enum": [
                "total_count",
                "message_template_count",
                "message_template_limit",
                "are_translations_complete"
            ],
            "x-enum-varnames": [
                "TotalCount",
                "MessageTemplateCount",
                "MessageTemplateLimit",
                "AreTranslationsComplete"
            ]
        },
        "template_model.TemplateSummaryResponse": {
            "type": "object",
            "properties": {
                "are_translations_complete": {
                    "type": "boolean"
                },
                "message_template_count": {
                    "type": "integer"
                },
                "message_template_limit": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "template_model.UseTemplate": {
            "type": "object",
            "properties": {
                "components": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/template_model.Component"
                    }
                },
                "language": {
                    "$ref": "#/definitions/common_model.Language"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "user_entity.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "user_model.Create": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "user_model.UpdateWithId": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier.",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "user_model.UpdateWithPassword": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "webhook_entity.Webhook": {
            "type": "object",
            "properties": {
                "authorization": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "event": {
                    "type": "string"
                },
                "http_method": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "timeout": {
                    "description": "The timeout in seconds. 0 means no timeout",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "webhook_entity.WebhookLog": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "http_response_code": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "payload": {},
                "response_data": {},
                "updated_at": {
                    "type": "string"
                },
                "webhook": {
                    "$ref": "#/definitions/webhook_entity.Webhook"
                },
                "webhook_id": {
                    "type": "string"
                }
            }
        },
        "webhook_model.Change": {
            "type": "object",
            "properties": {
                "field": {
                    "$ref": "#/definitions/webhook_model.Field"
                },
                "value": {
                    "$ref": "#/definitions/webhook_model.Value"
                }
            }
        },
        "webhook_model.Contact": {
            "type": "object",
            "properties": {
                "profile": {
                    "$ref": "#/definitions/webhook_model.ContactProfile"
                },
                "wa_id": {
                    "type": "string"
                }
            }
        },
        "webhook_model.ContactProfile": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "webhook_model.Conversation": {
            "type": "object",
            "properties": {
                "expiration_timestamp": {
                    "type": "string"
                },
                "id": {
                    "description": "Represents the ID of the conversation the given status notification belongs to.",
                    "type": "string"
                },
                "origin": {
                    "description": "Describes conversation category",
                    "allOf": [
                        {
                            "$ref": "#/definitions/webhook_model.Origin"
                        }
                    ]
                }
            }
        },
        "webhook_model.CreateWebhook": {
            "type": "object",
            "required": [
                "event",
                "http_method",
                "url"
            ],
            "properties": {
                "authorization": {
                    "description": "Optional authorization token",
                    "type": "string"
                },
                "event": {
                    "description": "Event type associated with the webhook, required",
                    "type": "string"
                },
                "http_method": {
                    "type": "string",
                    "enum": [
                        "GET",
                        "POST",
                        "PUT",
                        "DELETE",
                        "PATCH"
                    ]
                },
                "timeout": {
                    "type": "integer",
                    "minimum": 1
                },
                "url": {
                    "description": "Webhook URL, required and must be a valid URL",
                    "type": "string"
                }
            }
        },
        "webhook_model.Entry": {
            "type": "object",
            "properties": {
                "changes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/webhook_model.Change"
                    }
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "webhook_model.Field": {
            "type": "string",
            "enum": [
                "account_alerts",
                "business_capability_update",
                "business_status_update",
                "campaign_status_update",
                "account_update",
                "security",
                "account_review_update",
                "phone_number_quality_update",
                "phone_number_name_update",
                "partner_solutions",
                "messaging_handovers",
                "flows",
                "message_echoes",
                "template_category_update",
                "message_template_quality_update",
                "message_template_status_update",
                "messages"
            ],
            "x-enum-varnames": [
                "AccountAlerts",
                "BusinessCapabilityUpdate",
                "BusinessStatusUpdate",
                "CampaignStatusUpdate",
                "AccountUpdate",
                "Security",
                "AccountReviewUpdate",
                "PhoneNumberQualityUpdate",
                "PhoneNumberNameUpdate",
                "PartnerSolutions",
                "MessagingHandovers",
                "Flows",
                "MessageEchoes",
                "TemplateCategoryUpdate",
                "MessageTemplateQualityUpdate",
                "MessageTemplateStatusUpdate",
                "Messages"
            ]
        },
        "webhook_model.Metadata": {
            "type": "object",
            "properties": {
                "display_phone_number": {
                    "type": "string"
                },
                "phone_number_id": {
                    "type": "string"
                }
            }
        },
        "webhook_model.Origin": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Indicates conversation category. This can also be referred to as a conversation entry point",
                    "allOf": [
                        {
                            "$ref": "#/definitions/common_model.PricingCategory"
                        }
                    ]
                }
            }
        },
        "webhook_model.Status": {
            "type": "object",
            "properties": {
                "biz_opaque_callback_data": {
                    "description": "Arbitrary string used for tracking messages, groups of messages, you name it...",
                    "type": "string"
                },
                "conversation": {
                    "description": "Information about the conversation.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/webhook_model.Conversation"
                        }
                    ]
                },
                "errors": {
                    "description": "An array of error objects describing the error. Error objects have the following properties, which map to their equivalent properties in API error response payloads.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common_model.Error"
                    }
                },
                "id": {
                    "description": "The ID for the message that the business that is subscribed to the webhooks sent to a customer",
                    "type": "string"
                },
                "pricing": {
                    "description": "An object containing pricing information.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/common_model.Pricing"
                        }
                    ]
                },
                "recipient_id": {
                    "description": "The customer's WhatsApp ID. A business can respond to a customer using this ID. This ID may not match the customer's phone number, which is returned by the API as input when sending a message to the customer.",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/message_model.SendingStatus"
                },
                "timestamp": {
                    "description": "Date for the status message",
                    "type": "string"
                }
            }
        },
        "webhook_model.UpdateWebhook": {
            "type": "object",
            "properties": {
                "authorization": {
                    "description": "Optional updated authorization token",
                    "type": "string"
                },
                "event": {
                    "description": "Optional updated event associated with the webhook",
                    "type": "string"
                },
                "http_method": {
                    "type": "string",
                    "enum": [
                        "GET",
                        "POST",
                        "PUT",
                        "DELETE",
                        "PATCH"
                    ]
                },
                "id": {
                    "description": "The unique identifier.",
                    "type": "string"
                },
                "timeout": {
                    "type": "integer",
                    "minimum": 1
                },
                "url": {
                    "description": "Optional updated URL, validated to be a valid URL",
                    "type": "string"
                }
            }
        },
        "webhook_model.Value": {
            "type": "object",
            "properties": {
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/webhook_model.Contact"
                    }
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common_model.Error"
                    }
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/message_model.MessageReceived"
                    }
                },
                "messaging_product": {
                    "description": "Default is \"whatsapp\".",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/webhook_model.Metadata"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/webhook_model.Status"
                    }
                }
            }
        },
        "webhook_model.WebhookBody": {
            "type": "object",
            "properties": {
                "entry": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/webhook_model.Entry"
                    }
                },
                "object": {
                    "description": "The specific webhook a business is subscribed to. The webhook is whatsapp_business_account.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/common_model.BusinessAccount"
                        }
                    ]
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.0",
	Host:             "localhost:6900",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "wacraft Server API",
	Description:      "Backend server for the wacraft project. Handles WhatsApp Cloud API operations, including message sending, receiving, and webhook handling.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
